/*
 * Decompiled with CFR 0.152.
 */
package gnu.testlet.java.lang.String.classInfo;

import gnu.testlet.TestHarness;
import gnu.testlet.Testlet;
import java.lang.reflect.Method;
import java.util.HashMap;

public class getMethods
implements Testlet {
    @Override
    public void test(TestHarness harness) {
        HashMap<String, String> testedMethods = null;
        HashMap<String, String> testedMethods_jdk6 = new HashMap<String, String>();
        HashMap<String, String> testedMethods_jdk7 = new HashMap<String, String>();
        testedMethods_jdk6.put("public boolean java.lang.String.equals(java.lang.Object)", "equals");
        testedMethods_jdk6.put("public java.lang.String java.lang.String.toString()", "toString");
        testedMethods_jdk6.put("public int java.lang.String.hashCode()", "hashCode");
        testedMethods_jdk6.put("public int java.lang.String.compareTo(java.lang.String)", "compareTo");
        testedMethods_jdk6.put("public int java.lang.String.compareTo(java.lang.Object)", "compareTo");
        testedMethods_jdk6.put("public int java.lang.String.indexOf(int,int)", "indexOf");
        testedMethods_jdk6.put("public int java.lang.String.indexOf(java.lang.String,int)", "indexOf");
        testedMethods_jdk6.put("public int java.lang.String.indexOf(java.lang.String)", "indexOf");
        testedMethods_jdk6.put("public int java.lang.String.indexOf(int)", "indexOf");
        testedMethods_jdk6.put("public static java.lang.String java.lang.String.valueOf(int)", "valueOf");
        testedMethods_jdk6.put("public static java.lang.String java.lang.String.valueOf(long)", "valueOf");
        testedMethods_jdk6.put("public static java.lang.String java.lang.String.valueOf(float)", "valueOf");
        testedMethods_jdk6.put("public static java.lang.String java.lang.String.valueOf(double)", "valueOf");
        testedMethods_jdk6.put("public static java.lang.String java.lang.String.valueOf(java.lang.Object)", "valueOf");
        testedMethods_jdk6.put("public static java.lang.String java.lang.String.valueOf(char[],int,int)", "valueOf");
        testedMethods_jdk6.put("public static java.lang.String java.lang.String.valueOf(char[])", "valueOf");
        testedMethods_jdk6.put("public static java.lang.String java.lang.String.valueOf(char)", "valueOf");
        testedMethods_jdk6.put("public static java.lang.String java.lang.String.valueOf(boolean)", "valueOf");
        testedMethods_jdk6.put("public int java.lang.String.length()", "length");
        testedMethods_jdk6.put("public boolean java.lang.String.isEmpty()", "isEmpty");
        testedMethods_jdk6.put("public char java.lang.String.charAt(int)", "charAt");
        testedMethods_jdk6.put("public int java.lang.String.codePointAt(int)", "codePointAt");
        testedMethods_jdk6.put("public int java.lang.String.codePointBefore(int)", "codePointBefore");
        testedMethods_jdk6.put("public int java.lang.String.codePointCount(int,int)", "codePointCount");
        testedMethods_jdk6.put("public int java.lang.String.offsetByCodePoints(int,int)", "offsetByCodePoints");
        testedMethods_jdk6.put("public void java.lang.String.getChars(int,int,char[],int)", "getChars");
        testedMethods_jdk6.put("public byte[] java.lang.String.getBytes(java.nio.charset.Charset)", "getBytes");
        testedMethods_jdk6.put("public byte[] java.lang.String.getBytes()", "getBytes");
        testedMethods_jdk6.put("public byte[] java.lang.String.getBytes(java.lang.String) throws java.io.UnsupportedEncodingException", "getBytes");
        testedMethods_jdk6.put("public void java.lang.String.getBytes(int,int,byte[],int)", "getBytes");
        testedMethods_jdk6.put("public boolean java.lang.String.contentEquals(java.lang.CharSequence)", "contentEquals");
        testedMethods_jdk6.put("public boolean java.lang.String.contentEquals(java.lang.StringBuffer)", "contentEquals");
        testedMethods_jdk6.put("public boolean java.lang.String.equalsIgnoreCase(java.lang.String)", "equalsIgnoreCase");
        testedMethods_jdk6.put("public int java.lang.String.compareToIgnoreCase(java.lang.String)", "compareToIgnoreCase");
        testedMethods_jdk6.put("public boolean java.lang.String.regionMatches(boolean,int,java.lang.String,int,int)", "regionMatches");
        testedMethods_jdk6.put("public boolean java.lang.String.regionMatches(int,java.lang.String,int,int)", "regionMatches");
        testedMethods_jdk6.put("public boolean java.lang.String.startsWith(java.lang.String)", "startsWith");
        testedMethods_jdk6.put("public boolean java.lang.String.startsWith(java.lang.String,int)", "startsWith");
        testedMethods_jdk6.put("public boolean java.lang.String.endsWith(java.lang.String)", "endsWith");
        testedMethods_jdk6.put("public int java.lang.String.lastIndexOf(int)", "lastIndexOf");
        testedMethods_jdk6.put("public int java.lang.String.lastIndexOf(int,int)", "lastIndexOf");
        testedMethods_jdk6.put("public int java.lang.String.lastIndexOf(java.lang.String)", "lastIndexOf");
        testedMethods_jdk6.put("public int java.lang.String.lastIndexOf(java.lang.String,int)", "lastIndexOf");
        testedMethods_jdk6.put("public java.lang.String java.lang.String.substring(int)", "substring");
        testedMethods_jdk6.put("public java.lang.String java.lang.String.substring(int,int)", "substring");
        testedMethods_jdk6.put("public java.lang.CharSequence java.lang.String.subSequence(int,int)", "subSequence");
        testedMethods_jdk6.put("public java.lang.String java.lang.String.concat(java.lang.String)", "concat");
        testedMethods_jdk6.put("public java.lang.String java.lang.String.replace(char,char)", "replace");
        testedMethods_jdk6.put("public java.lang.String java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)", "replace");
        testedMethods_jdk6.put("public boolean java.lang.String.matches(java.lang.String)", "matches");
        testedMethods_jdk6.put("public boolean java.lang.String.contains(java.lang.CharSequence)", "contains");
        testedMethods_jdk6.put("public java.lang.String java.lang.String.replaceFirst(java.lang.String,java.lang.String)", "replaceFirst");
        testedMethods_jdk6.put("public java.lang.String java.lang.String.replaceAll(java.lang.String,java.lang.String)", "replaceAll");
        testedMethods_jdk6.put("public java.lang.String[] java.lang.String.split(java.lang.String,int)", "split");
        testedMethods_jdk6.put("public java.lang.String[] java.lang.String.split(java.lang.String)", "split");
        testedMethods_jdk6.put("public java.lang.String java.lang.String.toLowerCase(java.util.Locale)", "toLowerCase");
        testedMethods_jdk6.put("public java.lang.String java.lang.String.toLowerCase()", "toLowerCase");
        testedMethods_jdk6.put("public java.lang.String java.lang.String.toUpperCase()", "toUpperCase");
        testedMethods_jdk6.put("public java.lang.String java.lang.String.toUpperCase(java.util.Locale)", "toUpperCase");
        testedMethods_jdk6.put("public java.lang.String java.lang.String.trim()", "trim");
        testedMethods_jdk6.put("public char[] java.lang.String.toCharArray()", "toCharArray");
        testedMethods_jdk6.put("public static java.lang.String java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])", "format");
        testedMethods_jdk6.put("public static java.lang.String java.lang.String.format(java.lang.String,java.lang.Object[])", "format");
        testedMethods_jdk6.put("public static java.lang.String java.lang.String.copyValueOf(char[],int,int)", "copyValueOf");
        testedMethods_jdk6.put("public static java.lang.String java.lang.String.copyValueOf(char[])", "copyValueOf");
        testedMethods_jdk6.put("public java.lang.String java.lang.String.intern()", "intern");
        testedMethods_jdk6.put("public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException", "wait");
        testedMethods_jdk6.put("public final void java.lang.Object.wait(long) throws java.lang.InterruptedException", "wait");
        testedMethods_jdk6.put("public final void java.lang.Object.wait() throws java.lang.InterruptedException", "wait");
        testedMethods_jdk6.put("public final java.lang.Class java.lang.Object.getClass()", "getClass");
        testedMethods_jdk6.put("public final void java.lang.Object.notify()", "notify");
        testedMethods_jdk6.put("public final void java.lang.Object.notifyAll()", "notifyAll");
        testedMethods_jdk7.put("public boolean java.lang.String.equals(java.lang.Object)", "equals");
        testedMethods_jdk7.put("public java.lang.String java.lang.String.toString()", "toString");
        testedMethods_jdk7.put("public int java.lang.String.hashCode()", "hashCode");
        testedMethods_jdk7.put("public int java.lang.String.compareTo(java.lang.Object)", "compareTo");
        testedMethods_jdk7.put("public int java.lang.String.compareTo(java.lang.String)", "compareTo");
        testedMethods_jdk7.put("public int java.lang.String.indexOf(java.lang.String,int)", "indexOf");
        testedMethods_jdk7.put("public int java.lang.String.indexOf(int)", "indexOf");
        testedMethods_jdk7.put("public int java.lang.String.indexOf(int,int)", "indexOf");
        testedMethods_jdk7.put("public int java.lang.String.indexOf(java.lang.String)", "indexOf");
        testedMethods_jdk7.put("public static java.lang.String java.lang.String.valueOf(float)", "valueOf");
        testedMethods_jdk7.put("public static java.lang.String java.lang.String.valueOf(double)", "valueOf");
        testedMethods_jdk7.put("public static java.lang.String java.lang.String.valueOf(boolean)", "valueOf");
        testedMethods_jdk7.put("public static java.lang.String java.lang.String.valueOf(char[],int,int)", "valueOf");
        testedMethods_jdk7.put("public static java.lang.String java.lang.String.valueOf(char[])", "valueOf");
        testedMethods_jdk7.put("public static java.lang.String java.lang.String.valueOf(java.lang.Object)", "valueOf");
        testedMethods_jdk7.put("public static java.lang.String java.lang.String.valueOf(char)", "valueOf");
        testedMethods_jdk7.put("public static java.lang.String java.lang.String.valueOf(int)", "valueOf");
        testedMethods_jdk7.put("public static java.lang.String java.lang.String.valueOf(long)", "valueOf");
        testedMethods_jdk7.put("public boolean java.lang.String.contentEquals(java.lang.CharSequence)", "contentEquals");
        testedMethods_jdk7.put("public boolean java.lang.String.contentEquals(java.lang.StringBuffer)", "contentEquals");
        testedMethods_jdk7.put("public char java.lang.String.charAt(int)", "charAt");
        testedMethods_jdk7.put("public int java.lang.String.codePointAt(int)", "codePointAt");
        testedMethods_jdk7.put("public int java.lang.String.codePointBefore(int)", "codePointBefore");
        testedMethods_jdk7.put("public int java.lang.String.codePointCount(int,int)", "codePointCount");
        testedMethods_jdk7.put("public int java.lang.String.compareToIgnoreCase(java.lang.String)", "compareToIgnoreCase");
        testedMethods_jdk7.put("public java.lang.String java.lang.String.concat(java.lang.String)", "concat");
        testedMethods_jdk7.put("public boolean java.lang.String.contains(java.lang.CharSequence)", "contains");
        testedMethods_jdk7.put("public static java.lang.String java.lang.String.copyValueOf(char[])", "copyValueOf");
        testedMethods_jdk7.put("public static java.lang.String java.lang.String.copyValueOf(char[],int,int)", "copyValueOf");
        testedMethods_jdk7.put("public boolean java.lang.String.endsWith(java.lang.String)", "endsWith");
        testedMethods_jdk7.put("public boolean java.lang.String.equalsIgnoreCase(java.lang.String)", "equalsIgnoreCase");
        testedMethods_jdk7.put("public static java.lang.String java.lang.String.format(java.lang.String,java.lang.Object[])", "format");
        testedMethods_jdk7.put("public static java.lang.String java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])", "format");
        testedMethods_jdk7.put("public byte[] java.lang.String.getBytes()", "getBytes");
        testedMethods_jdk7.put("public byte[] java.lang.String.getBytes(java.lang.String) throws java.io.UnsupportedEncodingException", "getBytes");
        testedMethods_jdk7.put("public void java.lang.String.getBytes(int,int,byte[],int)", "getBytes");
        testedMethods_jdk7.put("public byte[] java.lang.String.getBytes(java.nio.charset.Charset)", "getBytes");
        testedMethods_jdk7.put("public void java.lang.String.getChars(int,int,char[],int)", "getChars");
        testedMethods_jdk7.put("public java.lang.String java.lang.String.intern()", "intern");
        testedMethods_jdk7.put("public boolean java.lang.String.isEmpty()", "isEmpty");
        testedMethods_jdk7.put("public int java.lang.String.lastIndexOf(int)", "lastIndexOf");
        testedMethods_jdk7.put("public int java.lang.String.lastIndexOf(int,int)", "lastIndexOf");
        testedMethods_jdk7.put("public int java.lang.String.lastIndexOf(java.lang.String,int)", "lastIndexOf");
        testedMethods_jdk7.put("public int java.lang.String.lastIndexOf(java.lang.String)", "lastIndexOf");
        testedMethods_jdk7.put("public int java.lang.String.length()", "length");
        testedMethods_jdk7.put("public boolean java.lang.String.matches(java.lang.String)", "matches");
        testedMethods_jdk7.put("public int java.lang.String.offsetByCodePoints(int,int)", "offsetByCodePoints");
        testedMethods_jdk7.put("public boolean java.lang.String.regionMatches(int,java.lang.String,int,int)", "regionMatches");
        testedMethods_jdk7.put("public boolean java.lang.String.regionMatches(boolean,int,java.lang.String,int,int)", "regionMatches");
        testedMethods_jdk7.put("public java.lang.String java.lang.String.replace(char,char)", "replace");
        testedMethods_jdk7.put("public java.lang.String java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)", "replace");
        testedMethods_jdk7.put("public java.lang.String java.lang.String.replaceAll(java.lang.String,java.lang.String)", "replaceAll");
        testedMethods_jdk7.put("public java.lang.String java.lang.String.replaceFirst(java.lang.String,java.lang.String)", "replaceFirst");
        testedMethods_jdk7.put("public java.lang.String[] java.lang.String.split(java.lang.String)", "split");
        testedMethods_jdk7.put("public java.lang.String[] java.lang.String.split(java.lang.String,int)", "split");
        testedMethods_jdk7.put("public boolean java.lang.String.startsWith(java.lang.String)", "startsWith");
        testedMethods_jdk7.put("public boolean java.lang.String.startsWith(java.lang.String,int)", "startsWith");
        testedMethods_jdk7.put("public java.lang.CharSequence java.lang.String.subSequence(int,int)", "subSequence");
        testedMethods_jdk7.put("public java.lang.String java.lang.String.substring(int,int)", "substring");
        testedMethods_jdk7.put("public java.lang.String java.lang.String.substring(int)", "substring");
        testedMethods_jdk7.put("public char[] java.lang.String.toCharArray()", "toCharArray");
        testedMethods_jdk7.put("public java.lang.String java.lang.String.toLowerCase()", "toLowerCase");
        testedMethods_jdk7.put("public java.lang.String java.lang.String.toLowerCase(java.util.Locale)", "toLowerCase");
        testedMethods_jdk7.put("public java.lang.String java.lang.String.toUpperCase(java.util.Locale)", "toUpperCase");
        testedMethods_jdk7.put("public java.lang.String java.lang.String.toUpperCase()", "toUpperCase");
        testedMethods_jdk7.put("public java.lang.String java.lang.String.trim()", "trim");
        testedMethods_jdk7.put("public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException", "wait");
        testedMethods_jdk7.put("public final void java.lang.Object.wait(long) throws java.lang.InterruptedException", "wait");
        testedMethods_jdk7.put("public final void java.lang.Object.wait() throws java.lang.InterruptedException", "wait");
        testedMethods_jdk7.put("public final java.lang.Class java.lang.Object.getClass()", "getClass");
        testedMethods_jdk7.put("public final void java.lang.Object.notify()", "notify");
        testedMethods_jdk7.put("public final void java.lang.Object.notifyAll()", "notifyAll");
        String o = new String();
        Class<?> c = o.getClass();
        testedMethods = this.getJavaVersion() < 7 ? testedMethods_jdk6 : testedMethods_jdk7;
        Method[] methods = c.getMethods();
        int expectedNumberOfMethods = testedMethods.size();
        harness.check(methods.length, expectedNumberOfMethods);
        for (Method method : methods) {
            String methodName = method.getName();
            String methodString = method.toString().replaceAll(" native ", " ");
            harness.check(testedMethods.containsKey(methodString));
            harness.check(testedMethods.get(methodString), (Object)methodName);
        }
    }

    protected int getJavaVersion() {
        String javaVersionStr = System.getProperty("java.version");
        String[] parts = javaVersionStr.split("\\.");
        return Integer.parseInt(parts[1]);
    }
}

