/*
 * Decompiled with CFR 0.152.
 */
package gnu.testlet.javax.swing.plaf.basic.BasicLookAndFeel;

import gnu.testlet.TestHarness;
import gnu.testlet.Testlet;
import gnu.testlet.javax.swing.plaf.basic.BasicLookAndFeel.MyBasicLookAndFeel;
import java.awt.Dimension;
import java.util.Arrays;
import java.util.List;
import javax.swing.Icon;
import javax.swing.InputMap;
import javax.swing.KeyStroke;
import javax.swing.ListCellRenderer;
import javax.swing.UIDefaults;
import javax.swing.UIManager;
import javax.swing.border.Border;
import javax.swing.plaf.BorderUIResource;
import javax.swing.plaf.ColorUIResource;
import javax.swing.plaf.DimensionUIResource;
import javax.swing.plaf.FontUIResource;
import javax.swing.plaf.InputMapUIResource;
import javax.swing.plaf.InsetsUIResource;
import javax.swing.plaf.basic.BasicBorders;

public class initComponentDefaults
implements Testlet {
    @Override
    public void test(TestHarness harness) {
        MyBasicLookAndFeel laf = new MyBasicLookAndFeel();
        UIDefaults defaults = new UIDefaults();
        laf.initComponentDefaults(defaults);
        harness.checkPoint("AuditoryCues");
        harness.check(defaults.get("AuditoryCues.allAuditoryCues") != null);
        harness.check(defaults.get("AuditoryCues.cueList") != null);
        harness.check(defaults.get("AuditoryCues.noAuditoryCues") != null);
        harness.checkPoint("Button");
        BorderUIResource.CompoundBorderUIResource b1 = (BorderUIResource.CompoundBorderUIResource)defaults.get("Button.border");
        harness.check(b1.getInsideBorder() instanceof BasicBorders.MarginBorder);
        harness.check(b1.getOutsideBorder() instanceof BasicBorders.ButtonBorder);
        harness.check(defaults.get("Button.font"), new FontUIResource("Dialog", 0, 12));
        harness.check(defaults.get("Button.margin"), new InsetsUIResource(2, 14, 2, 14));
        harness.check(defaults.get("Button.textIconGap"), new Integer(4));
        harness.check(defaults.get("Button.textShiftOffset"), new Integer(0));
        harness.check(defaults.get("Button.focusInputMap") instanceof InputMapUIResource);
        Object b = UIManager.get("Button.focusInputMap");
        InputMapUIResource bim = (InputMapUIResource)b;
        KeyStroke[] kb = bim.keys();
        harness.check(kb.length == 2);
        harness.check(bim.get(KeyStroke.getKeyStroke("SPACE")), (Object)"pressed");
        harness.check(bim.get(KeyStroke.getKeyStroke("released SPACE")), (Object)"released");
        harness.checkPoint("CheckBox");
        BorderUIResource.CompoundBorderUIResource b2 = (BorderUIResource.CompoundBorderUIResource)defaults.get("CheckBox.border");
        harness.check(b2.getInsideBorder() instanceof BasicBorders.MarginBorder);
        harness.check(b2.getOutsideBorder() instanceof BasicBorders.ButtonBorder);
        harness.check(defaults.get("CheckBox.focusInputMap") instanceof InputMapUIResource);
        Object c = UIManager.get("CheckBox.focusInputMap");
        InputMapUIResource cim = (InputMapUIResource)c;
        KeyStroke[] kc = cim.keys();
        harness.check(kc.length == 2);
        harness.check(cim.get(KeyStroke.getKeyStroke("SPACE")), (Object)"pressed");
        harness.check(cim.get(KeyStroke.getKeyStroke("released SPACE")), (Object)"released");
        harness.check(defaults.get("CheckBox.font"), new FontUIResource("Dialog", 0, 12));
        harness.check(defaults.get("CheckBox.icon") instanceof Icon);
        harness.check(defaults.get("CheckBox.margin"), new InsetsUIResource(2, 2, 2, 2));
        harness.check(defaults.get("CheckBox.textIconGap"), new Integer(4));
        harness.check(defaults.get("CheckBox.textShiftOffset"), new Integer(0));
        harness.checkPoint("CheckBoxMenuItem");
        harness.check(defaults.get("CheckBoxMenuItem.acceleratorFont"), new FontUIResource("Dialog", 0, 12));
        harness.check(defaults.get("CheckBoxMenuItem.arrowIcon") instanceof Icon);
        harness.check(defaults.get("CheckBoxMenuItem.border") instanceof BasicBorders.MarginBorder);
        harness.check(defaults.get("CheckBoxMenuItem.borderPainted"), Boolean.FALSE);
        harness.check(defaults.get("CheckBoxMenuItem.checkIcon") instanceof Icon);
        harness.check(defaults.get("CheckBoxMenuItem.font"), new FontUIResource("Dialog", 0, 12));
        harness.check(defaults.get("CheckBoxMenuItem.margin"), new InsetsUIResource(2, 2, 2, 2));
        harness.checkPoint("ColorChooser");
        harness.check(defaults.get("ColorChooser.font"), new FontUIResource("Dialog", 0, 12));
        harness.check(defaults.get("ColorChooser.rgbBlueMnemonic"), (Object)"66");
        harness.check(defaults.get("ColorChooser.rgbGreenMnemonic"), (Object)"78");
        harness.check(defaults.get("ColorChooser.rgbRedMnemonic"), (Object)"68");
        harness.check(defaults.get("ColorChooser.swatchesRecentSwatchSize"), new Dimension(10, 10));
        harness.check(defaults.get("ColorChooser.swatchesSwatchSize"), new Dimension(10, 10));
        harness.checkPoint("ComboBox");
        harness.check(defaults.get("ComboBox.ancestorInputMap") instanceof InputMapUIResource);
        harness.check(defaults.get("ComboBox.font"), new FontUIResource("SansSerif", 0, 12));
        harness.checkPoint("Desktop");
        harness.check(defaults.get("Desktop.ancestorInputMap") instanceof InputMapUIResource);
        harness.checkPoint("DesktopIcon");
        harness.check(defaults.get("DesktopIcon.border") instanceof BorderUIResource.CompoundBorderUIResource);
        harness.checkPoint("EditorPane");
        harness.check(defaults.get("EditorPane.background"), new ColorUIResource(255, 255, 255));
        harness.check(defaults.get("EditorPane.border") instanceof BasicBorders.MarginBorder);
        harness.check(defaults.get("EditorPane.caretBlinkRate"), new Integer(500));
        harness.check(defaults.get("EditorPane.font"), new FontUIResource("Serif", 0, 12));
        harness.check(defaults.get("EditorPane.margin"), new InsetsUIResource(3, 3, 3, 3));
        Object e = UIManager.get("EditorPane.focusInputMap");
        InputMapUIResource eim = (InputMapUIResource)e;
        KeyStroke[] ke = eim.keys();
        harness.check(ke.length == 55);
        harness.check(eim.get(KeyStroke.getKeyStroke("shift UP")), (Object)"selection-up");
        harness.check(eim.get(KeyStroke.getKeyStroke("ctrl RIGHT")), (Object)"caret-next-word");
        harness.check(eim.get(KeyStroke.getKeyStroke("shift ctrl LEFT")), (Object)"selection-previous-word");
        harness.check(eim.get(KeyStroke.getKeyStroke("shift KP_UP")), (Object)"selection-up");
        harness.check(eim.get(KeyStroke.getKeyStroke("DOWN")), (Object)"caret-down");
        harness.check(eim.get(KeyStroke.getKeyStroke("shift ctrl T")), (Object)"previous-link-action");
        harness.check(eim.get(KeyStroke.getKeyStroke("ctrl LEFT")), (Object)"caret-previous-word");
        harness.check(eim.get(KeyStroke.getKeyStroke("CUT")), (Object)"cut-to-clipboard");
        harness.check(eim.get(KeyStroke.getKeyStroke("END")), (Object)"caret-end-line");
        harness.check(eim.get(KeyStroke.getKeyStroke("shift PAGE_UP")), (Object)"selection-page-up");
        harness.check(eim.get(KeyStroke.getKeyStroke("KP_UP")), (Object)"caret-up");
        harness.check(eim.get(KeyStroke.getKeyStroke("DELETE")), (Object)"delete-next");
        harness.check(eim.get(KeyStroke.getKeyStroke("ctrl HOME")), (Object)"caret-begin");
        harness.check(eim.get(KeyStroke.getKeyStroke("shift LEFT")), (Object)"selection-backward");
        harness.check(eim.get(KeyStroke.getKeyStroke("ctrl END")), (Object)"caret-end");
        harness.check(eim.get(KeyStroke.getKeyStroke("BACK_SPACE")), (Object)"delete-previous");
        harness.check(eim.get(KeyStroke.getKeyStroke("shift ctrl RIGHT")), (Object)"selection-next-word");
        harness.check(eim.get(KeyStroke.getKeyStroke("LEFT")), (Object)"caret-backward");
        harness.check(eim.get(KeyStroke.getKeyStroke("KP_LEFT")), (Object)"caret-backward");
        harness.check(eim.get(KeyStroke.getKeyStroke("shift KP_RIGHT")), (Object)"selection-forward");
        harness.check(eim.get(KeyStroke.getKeyStroke("ctrl SPACE")), (Object)"activate-link-action");
        harness.check(eim.get(KeyStroke.getKeyStroke("ctrl H")), (Object)"delete-previous");
        harness.check(eim.get(KeyStroke.getKeyStroke("ctrl BACK_SLASH")), (Object)"unselect");
        harness.check(eim.get(KeyStroke.getKeyStroke("ENTER")), (Object)"insert-break");
        harness.check(eim.get(KeyStroke.getKeyStroke("shift HOME")), (Object)"selection-begin-line");
        harness.check(eim.get(KeyStroke.getKeyStroke("RIGHT")), (Object)"caret-forward");
        harness.check(eim.get(KeyStroke.getKeyStroke("shift ctrl PAGE_UP")), (Object)"selection-page-left");
        harness.check(eim.get(KeyStroke.getKeyStroke("shift DOWN")), (Object)"selection-down");
        harness.check(eim.get(KeyStroke.getKeyStroke("PAGE_DOWN")), (Object)"page-down");
        harness.check(eim.get(KeyStroke.getKeyStroke("shift KP_LEFT")), (Object)"selection-backward");
        harness.check(eim.get(KeyStroke.getKeyStroke("shift ctrl O")), (Object)"toggle-componentOrientation");
        harness.check(eim.get(KeyStroke.getKeyStroke("ctrl X")), (Object)"cut-to-clipboard");
        harness.check(eim.get(KeyStroke.getKeyStroke("shift ctrl PAGE_DOWN")), (Object)"selection-page-right");
        harness.check(eim.get(KeyStroke.getKeyStroke("ctrl C")), (Object)"copy-to-clipboard");
        harness.check(eim.get(KeyStroke.getKeyStroke("ctrl KP_RIGHT")), (Object)"caret-next-word");
        harness.check(eim.get(KeyStroke.getKeyStroke("shift END")), (Object)"selection-end-line");
        harness.check(eim.get(KeyStroke.getKeyStroke("ctrl KP_LEFT")), (Object)"caret-previous-word");
        harness.check(eim.get(KeyStroke.getKeyStroke("HOME")), (Object)"caret-begin-line");
        harness.check(eim.get(KeyStroke.getKeyStroke("ctrl V")), (Object)"paste-from-clipboard");
        harness.check(eim.get(KeyStroke.getKeyStroke("KP_DOWN")), (Object)"caret-down");
        harness.check(eim.get(KeyStroke.getKeyStroke("ctrl A")), (Object)"select-all");
        harness.check(eim.get(KeyStroke.getKeyStroke("shift RIGHT")), (Object)"selection-forward");
        harness.check(eim.get(KeyStroke.getKeyStroke("shift ctrl END")), (Object)"selection-end");
        harness.check(eim.get(KeyStroke.getKeyStroke("COPY")), (Object)"copy-to-clipboard");
        harness.check(eim.get(KeyStroke.getKeyStroke("shift ctrl KP_LEFT")), (Object)"selection-previous-word");
        harness.check(eim.get(KeyStroke.getKeyStroke("ctrl T")), (Object)"next-link-action");
        harness.check(eim.get(KeyStroke.getKeyStroke("shift KP_DOWN")), (Object)"selection-down");
        harness.check(eim.get(KeyStroke.getKeyStroke("TAB")), (Object)"insert-tab");
        harness.check(eim.get(KeyStroke.getKeyStroke("UP")), (Object)"caret-up");
        harness.check(eim.get(KeyStroke.getKeyStroke("shift ctrl HOME")), (Object)"selection-begin");
        harness.check(eim.get(KeyStroke.getKeyStroke("shift PAGE_DOWN")), (Object)"selection-page-down");
        harness.check(eim.get(KeyStroke.getKeyStroke("KP_RIGHT")), (Object)"caret-forward");
        harness.check(eim.get(KeyStroke.getKeyStroke("shift ctrl KP_RIGHT")), (Object)"selection-next-word");
        harness.check(eim.get(KeyStroke.getKeyStroke("PAGE_UP")), (Object)"page-up");
        harness.check(eim.get(KeyStroke.getKeyStroke("PASTE")), (Object)"paste-from-clipboard");
        harness.checkPoint("FileChooser");
        harness.check(defaults.get("FileChooser.ancestorInputMap") instanceof InputMapUIResource);
        harness.check(defaults.get("FileChooser.cancelButtonMnemonic"), (Object)"67");
        harness.check(defaults.get("FileChooser.directoryOpenButtonMnemonic"), (Object)"79");
        harness.check(defaults.get("FileChooser.helpButtonMnemonic"), (Object)"72");
        harness.check(defaults.get("FileChooser.openButtonMnemonic"), (Object)"79");
        harness.check(defaults.get("FileChooser.saveButtonMnemonic"), (Object)"83");
        harness.check(defaults.get("FileChooser.updateButtonMnemonic"), (Object)"85");
        harness.checkPoint("FileView");
        harness.checkPoint("FormattedTextField");
        harness.check(defaults.get("FormattedTextField.border") instanceof BasicBorders.FieldBorder);
        harness.check(defaults.get("FormattedTextField.caretBlinkRate"), new Integer(500));
        harness.check(defaults.get("FormattedTextField.focusInputMap") instanceof InputMapUIResource);
        harness.check(defaults.get("FormattedTextField.font"), new FontUIResource("SansSerif", 0, 12));
        harness.check(defaults.get("FormattedTextField.margin"), new InsetsUIResource(0, 0, 0, 0));
        Object f = UIManager.get("FormattedTextField.focusInputMap");
        InputMapUIResource fim = (InputMapUIResource)f;
        KeyStroke[] kf = fim.keys();
        harness.check(kf.length == 38);
        harness.check(fim.get(KeyStroke.getKeyStroke("KP_UP")), (Object)"increment");
        harness.check(fim.get(KeyStroke.getKeyStroke("END")), (Object)"caret-end-line");
        harness.check(fim.get(KeyStroke.getKeyStroke("shift ctrl  O")), (Object)"toggle-componentOrientation");
        harness.check(fim.get(KeyStroke.getKeyStroke("shift KP_LEFT")), (Object)"selection-backward");
        harness.check(fim.get(KeyStroke.getKeyStroke("shift RIGHT")), (Object)"selection-forward");
        harness.check(fim.get(KeyStroke.getKeyStroke("KP_DOWN")), (Object)"decrement");
        harness.check(fim.get(KeyStroke.getKeyStroke("HOME")), (Object)"caret-begin-line");
        harness.check(fim.get(KeyStroke.getKeyStroke("ctrl V")), (Object)"paste-from-clipboard");
        harness.check(fim.get(KeyStroke.getKeyStroke("ctrl H")), (Object)"delete-previous");
        harness.check(fim.get(KeyStroke.getKeyStroke("KP_LEFT")), (Object)"caret-backward");
        harness.check(fim.get(KeyStroke.getKeyStroke("LEFT")), (Object)"caret-backward");
        harness.check(fim.get(KeyStroke.getKeyStroke("ctrl X")), (Object)"cut-to-clipboard");
        harness.check(fim.get(KeyStroke.getKeyStroke("KP_RIGHT")), (Object)"caret-forward");
        harness.check(fim.get(KeyStroke.getKeyStroke("UP")), (Object)"increment");
        harness.check(fim.get(KeyStroke.getKeyStroke("shift ctrl KP_RIGHT")), (Object)"selection-next-word");
        harness.check(fim.get(KeyStroke.getKeyStroke("COPY")), (Object)"copy-to-clipboard");
        harness.check(fim.get(KeyStroke.getKeyStroke("shift HOME")), (Object)"selection-begin-line");
        harness.check(fim.get(KeyStroke.getKeyStroke("ESCAPE")), (Object)"reset-field-edit");
        harness.check(fim.get(KeyStroke.getKeyStroke("RIGHT")), (Object)"caret-forward");
        harness.check(fim.get(KeyStroke.getKeyStroke("shift ctrl LEFT")), (Object)"selection-previous-word");
        harness.check(fim.get(KeyStroke.getKeyStroke("ctrl KP_LEFT")), (Object)"caret-previous-word");
        harness.check(fim.get(KeyStroke.getKeyStroke("DOWN")), (Object)"decrement");
        harness.check(fim.get(KeyStroke.getKeyStroke("ctrl KP_RIGHT")), (Object)"caret-next-word");
        harness.check(fim.get(KeyStroke.getKeyStroke("PASTE")), (Object)"paste-from-clipboard");
        harness.check(fim.get(KeyStroke.getKeyStroke("shift ctrl RIGHT")), (Object)"selection-next-word");
        harness.check(fim.get(KeyStroke.getKeyStroke("ctrl BACK_SLASH")), (Object)"unselect");
        harness.check(fim.get(KeyStroke.getKeyStroke("ctrl A")), (Object)"select-all");
        harness.check(fim.get(KeyStroke.getKeyStroke("shift KP_RIGHT")), (Object)"selection-forward");
        harness.check(fim.get(KeyStroke.getKeyStroke("CUT")), (Object)"cut-to-clipboard");
        harness.check(fim.get(KeyStroke.getKeyStroke("ctrl LEFT")), (Object)"caret-previous-word");
        harness.check(fim.get(KeyStroke.getKeyStroke("BACK_SPACE")), (Object)"delete-previous");
        harness.check(fim.get(KeyStroke.getKeyStroke("shift ctrl KP_LEFT")), (Object)"selection-previous-word");
        harness.check(fim.get(KeyStroke.getKeyStroke("ctrl C")), (Object)"copy-to-clipboard");
        harness.check(fim.get(KeyStroke.getKeyStroke("shift END")), (Object)"selection-end-line");
        harness.check(fim.get(KeyStroke.getKeyStroke("ctrl RIGHT")), (Object)"caret-next-word");
        harness.check(fim.get(KeyStroke.getKeyStroke("DELETE")), (Object)"delete-next");
        harness.check(fim.get(KeyStroke.getKeyStroke("ENTER")), (Object)"notify-field-accept");
        harness.check(fim.get(KeyStroke.getKeyStroke("shift LEFT")), (Object)"selection-backward");
        harness.checkPoint("InternalFrame");
        harness.check(defaults.get("InternalFrame.border") instanceof BorderUIResource.CompoundBorderUIResource);
        harness.check(defaults.get("InternalFrame.closeIcon") instanceof Icon);
        harness.check(defaults.get("InternalFrame.iconifyIcon") instanceof Icon);
        harness.check(defaults.get("InternalFrame.maximizeIcon") instanceof Icon);
        harness.check(defaults.get("InternalFrame.minimizeIcon") instanceof Icon);
        harness.check(defaults.get("InternalFrame.titleFont"), new FontUIResource("Dialog", 1, 12));
        harness.check(defaults.get("InternalFrame.windowBindings") instanceof Object[]);
        harness.checkPoint("Label");
        harness.check(defaults.get("Label.disabledForeground"), new ColorUIResource(255, 255, 255));
        harness.check(defaults.get("Label.font"), new FontUIResource("Dialog", 0, 12));
        harness.checkPoint("List");
        harness.check(defaults.get("List.cellRenderer") instanceof ListCellRenderer);
        harness.check(defaults.get("List.focusCellHighlightBorder") instanceof BorderUIResource.LineBorderUIResource);
        harness.check(defaults.get("List.focusInputMap") instanceof InputMapUIResource);
        Object l = UIManager.get("List.focusInputMap");
        InputMapUIResource lim = (InputMapUIResource)l;
        KeyStroke[] kl = lim.keys();
        harness.check(kl.length == 61);
        harness.check(lim.get(KeyStroke.getKeyStroke("ctrl DOWN")), (Object)"selectNextRowChangeLead");
        harness.check(lim.get(KeyStroke.getKeyStroke("shift UP")), (Object)"selectPreviousRowExtendSelection");
        harness.check(lim.get(KeyStroke.getKeyStroke("ctrl RIGHT")), (Object)"selectNextColumnChangeLead");
        harness.check(lim.get(KeyStroke.getKeyStroke("shift ctrl LEFT")), (Object)"selectPreviousColumnExtendSelection");
        harness.check(lim.get(KeyStroke.getKeyStroke("shift KP_UP")), (Object)"selectPreviousRowExtendSelection");
        harness.check(lim.get(KeyStroke.getKeyStroke("DOWN")), (Object)"selectNextRow");
        harness.check(lim.get(KeyStroke.getKeyStroke("ctrl UP")), (Object)"selectPreviousRowChangeLead");
        harness.check(lim.get(KeyStroke.getKeyStroke("ctrl LEFT")), (Object)"selectPreviousColumnChangeLead");
        harness.check(lim.get(KeyStroke.getKeyStroke("CUT")), (Object)"cut");
        harness.check(lim.get(KeyStroke.getKeyStroke("END")), (Object)"selectLastRow");
        harness.check(lim.get(KeyStroke.getKeyStroke("shift PAGE_UP")), (Object)"scrollUpExtendSelection");
        harness.check(lim.get(KeyStroke.getKeyStroke("KP_UP")), (Object)"selectPreviousRow");
        harness.check(lim.get(KeyStroke.getKeyStroke("shift ctrl UP")), (Object)"selectPreviousRowExtendSelection");
        harness.check(lim.get(KeyStroke.getKeyStroke("ctrl HOME")), (Object)"selectFirstRowChangeLead");
        harness.check(lim.get(KeyStroke.getKeyStroke("shift LEFT")), (Object)"selectPreviousColumnExtendSelection");
        harness.check(lim.get(KeyStroke.getKeyStroke("ctrl END")), (Object)"selectLastRowChangeLead");
        harness.check(lim.get(KeyStroke.getKeyStroke("ctrl PAGE_DOWN")), (Object)"scrollDownChangeLead");
        harness.check(lim.get(KeyStroke.getKeyStroke("shift ctrl RIGHT")), (Object)"selectNextColumnExtendSelection");
        harness.check(lim.get(KeyStroke.getKeyStroke("LEFT")), (Object)"selectPreviousColumn");
        harness.check(lim.get(KeyStroke.getKeyStroke("ctrl PAGE_UP")), (Object)"scrollUpChangeLead");
        harness.check(lim.get(KeyStroke.getKeyStroke("KP_LEFT")), (Object)"selectPreviousColumn");
        harness.check(lim.get(KeyStroke.getKeyStroke("shift KP_RIGHT")), (Object)"selectNextColumnExtendSelection");
        harness.check(lim.get(KeyStroke.getKeyStroke("SPACE")), (Object)"addToSelection");
        harness.check(lim.get(KeyStroke.getKeyStroke("ctrl SPACE")), (Object)"toggleAndAnchor");
        harness.check(lim.get(KeyStroke.getKeyStroke("shift SPACE")), (Object)"extendTo");
        harness.check(lim.get(KeyStroke.getKeyStroke("shift ctrl SPACE")), (Object)"moveSelectionTo");
        harness.check(lim.get(KeyStroke.getKeyStroke("shift ctrl DOWN")), (Object)"selectNextRowExtendSelection");
        harness.check(lim.get(KeyStroke.getKeyStroke("ctrl BACK_SLASH")), (Object)"clearSelection");
        harness.check(lim.get(KeyStroke.getKeyStroke("shift HOME")), (Object)"selectFirstRowExtendSelection");
        harness.check(lim.get(KeyStroke.getKeyStroke("RIGHT")), (Object)"selectNextColumn");
        harness.check(lim.get(KeyStroke.getKeyStroke("shift ctrl PAGE_UP")), (Object)"scrollUpExtendSelection");
        harness.check(lim.get(KeyStroke.getKeyStroke("shift DOWN")), (Object)"selectNextRowExtendSelection");
        harness.check(lim.get(KeyStroke.getKeyStroke("PAGE_DOWN")), (Object)"scrollDown");
        harness.check(lim.get(KeyStroke.getKeyStroke("shift ctrl KP_UP")), (Object)"selectPreviousRowExtendSelection");
        harness.check(lim.get(KeyStroke.getKeyStroke("shift KP_LEFT")), (Object)"selectPreviousColumnExtendSelection");
        harness.check(lim.get(KeyStroke.getKeyStroke("ctrl X")), (Object)"cut");
        harness.check(lim.get(KeyStroke.getKeyStroke("shift ctrl PAGE_DOWN")), (Object)"scrollDownExtendSelection");
        harness.check(lim.get(KeyStroke.getKeyStroke("ctrl SLASH")), (Object)"selectAll");
        harness.check(lim.get(KeyStroke.getKeyStroke("ctrl C")), (Object)"copy");
        harness.check(lim.get(KeyStroke.getKeyStroke("ctrl KP_RIGHT")), (Object)"selectNextColumnChangeLead");
        harness.check(lim.get(KeyStroke.getKeyStroke("shift END")), (Object)"selectLastRowExtendSelection");
        harness.check(lim.get(KeyStroke.getKeyStroke("shift ctrl KP_DOWN")), (Object)"selectNextRowExtendSelection");
        harness.check(lim.get(KeyStroke.getKeyStroke("ctrl KP_LEFT")), (Object)"selectPreviousColumnChangeLead");
        harness.check(lim.get(KeyStroke.getKeyStroke("HOME")), (Object)"selectFirstRow");
        harness.check(lim.get(KeyStroke.getKeyStroke("ctrl V")), (Object)"paste");
        harness.check(lim.get(KeyStroke.getKeyStroke("KP_DOWN")), (Object)"selectNextRow");
        harness.check(lim.get(KeyStroke.getKeyStroke("ctrl KP_DOWN")), (Object)"selectNextRowChangeLead");
        harness.check(lim.get(KeyStroke.getKeyStroke("shift RIGHT")), (Object)"selectNextColumnExtendSelection");
        harness.check(lim.get(KeyStroke.getKeyStroke("ctrl A")), (Object)"selectAll");
        harness.check(lim.get(KeyStroke.getKeyStroke("shift ctrl END")), (Object)"selectLastRowExtendSelection");
        harness.check(lim.get(KeyStroke.getKeyStroke("COPY")), (Object)"copy");
        harness.check(lim.get(KeyStroke.getKeyStroke("ctrl KP_UP")), (Object)"selectPreviousRowChangeLead");
        harness.check(lim.get(KeyStroke.getKeyStroke("shift ctrl KP_LEFT")), (Object)"selectPreviousColumnExtendSelection");
        harness.check(lim.get(KeyStroke.getKeyStroke("shift KP_DOWN")), (Object)"selectNextRowExtendSelection");
        harness.check(lim.get(KeyStroke.getKeyStroke("UP")), (Object)"selectPreviousRow");
        harness.check(lim.get(KeyStroke.getKeyStroke("shift ctrl HOME")), (Object)"selectFirstRowExtendSelection");
        harness.check(lim.get(KeyStroke.getKeyStroke("shift PAGE_DOWN")), (Object)"scrollDownExtendSelection");
        harness.check(lim.get(KeyStroke.getKeyStroke("KP_RIGHT")), (Object)"selectNextColumn");
        harness.check(lim.get(KeyStroke.getKeyStroke("shift ctrl KP_RIGHT")), (Object)"selectNextColumnExtendSelection");
        harness.check(lim.get(KeyStroke.getKeyStroke("PAGE_UP")), (Object)"scrollUp");
        harness.check(lim.get(KeyStroke.getKeyStroke("PASTE")), (Object)"paste");
        harness.check(defaults.get("List.focusInputMap.RightToLeft") instanceof InputMapUIResource);
        harness.check(defaults.get("List.font"), new FontUIResource("Dialog", 0, 12));
        harness.checkPoint("Menu");
        harness.check(defaults.get("Menu.acceleratorFont"), new FontUIResource("Dialog", 0, 12));
        harness.check(defaults.get("Menu.arrowIcon") instanceof Icon);
        harness.check(defaults.get("Menu.border") instanceof BasicBorders.MarginBorder);
        harness.check(defaults.get("Menu.borderPainted"), Boolean.FALSE);
        harness.check(defaults.get("Menu.checkIcon") instanceof Icon);
        harness.check(defaults.get("Menu.crossMenuMnemonic"), Boolean.TRUE);
        harness.check(defaults.get("Menu.font"), new FontUIResource("Dialog", 0, 12));
        harness.check(defaults.get("Menu.margin"), new InsetsUIResource(2, 2, 2, 2));
        harness.check(defaults.get("Menu.menuPopupOffsetX"), new Integer(0));
        harness.check(defaults.get("Menu.menuPopupOffsetY"), new Integer(0));
        int[] shortcuts = (int[])defaults.get("Menu.shortcutKeys");
        if (shortcuts == null) {
            shortcuts = new int[]{999};
        }
        harness.check(shortcuts.length, 1);
        harness.check(shortcuts[0], 8);
        harness.check(defaults.get("Menu.submenuPopupOffsetX"), new Integer(0));
        harness.check(defaults.get("Menu.submenuPopupOffsetY"), new Integer(0));
        harness.checkPoint("MenuBar");
        harness.check(defaults.get("MenuBar.border") instanceof BasicBorders.MenuBarBorder);
        harness.check(defaults.get("MenuBar.font"), new FontUIResource("Dialog", 0, 12));
        harness.check(defaults.get("MenuBar.windowBindings") instanceof Object[]);
        harness.checkPoint("MenuItem");
        harness.check(defaults.get("MenuItem.acceleratorDelimiter"), (Object)"+");
        harness.check(defaults.get("MenuItem.acceleratorFont"), new FontUIResource("Dialog", 0, 12));
        harness.check(defaults.get("MenuItem.arrowIcon") instanceof Icon);
        harness.check(defaults.get("MenuItem.border") instanceof BasicBorders.MarginBorder);
        harness.check(defaults.get("MenuItem.borderPainted"), Boolean.FALSE);
        harness.check(defaults.get("MenuItem.checkIcon") instanceof Icon);
        harness.check(defaults.get("MenuItem.font"), new FontUIResource("Dialog", 0, 12));
        harness.check(defaults.get("MenuItem.margin"), new InsetsUIResource(2, 2, 2, 2));
        harness.checkPoint("OptionPane");
        harness.check(defaults.get("OptionPane.border") instanceof BorderUIResource.EmptyBorderUIResource);
        harness.check(defaults.get("OptionPane.buttonAreaBorder") instanceof BorderUIResource.EmptyBorderUIResource);
        harness.check(defaults.get("OptionPane.buttonClickThreshhold"), new Integer(500));
        harness.check(defaults.get("OptionPane.font"), new FontUIResource("Dialog", 0, 12));
        harness.check(defaults.get("OptionPane.messageAreaBorder") instanceof BorderUIResource.EmptyBorderUIResource);
        harness.check(defaults.get("OptionPane.minimumSize"), new DimensionUIResource(262, 90));
        harness.check(defaults.get("OptionPane.windowBindings") instanceof Object[]);
        harness.checkPoint("Panel");
        harness.check(defaults.get("Panel.font"), new FontUIResource("Dialog", 0, 12));
        harness.checkPoint("PasswordField");
        harness.check(defaults.get("PasswordField.border") instanceof BasicBorders.FieldBorder);
        harness.check(defaults.get("PasswordField.caretBlinkRate"), new Integer(500));
        harness.check(defaults.get("PasswordField.font"), new FontUIResource("MonoSpaced", 0, 12));
        harness.check(defaults.get("PasswordField.margin"), new InsetsUIResource(0, 0, 0, 0));
        harness.check(UIManager.get("PasswordField.focusInputMap") instanceof InputMapUIResource);
        Object o = UIManager.get("PasswordField.focusInputMap");
        InputMapUIResource im = (InputMapUIResource)o;
        KeyStroke[] k = im.keys();
        harness.check(k.length == 33);
        harness.check(im.get(KeyStroke.getKeyStroke("END")), (Object)"caret-end-line");
        harness.check(im.get(KeyStroke.getKeyStroke("shift ctrl O")), (Object)"toggle-componentOrientation");
        harness.check(im.get(KeyStroke.getKeyStroke("shift KP_LEFT")), (Object)"selection-backward");
        harness.check(im.get(KeyStroke.getKeyStroke("shift RIGHT")), (Object)"selection-forward");
        harness.check(im.get(KeyStroke.getKeyStroke("HOME")), (Object)"caret-begin-line");
        harness.check(im.get(KeyStroke.getKeyStroke("ctrl V")), (Object)"paste-from-clipboard");
        harness.check(im.get(KeyStroke.getKeyStroke("ctrl H")), (Object)"delete-previous");
        harness.check(im.get(KeyStroke.getKeyStroke("KP_LEFT")), (Object)"caret-backward");
        harness.check(im.get(KeyStroke.getKeyStroke("LEFT")), (Object)"caret-backward");
        harness.check(im.get(KeyStroke.getKeyStroke("ctrl X")), (Object)"cut-to-clipboard");
        harness.check(im.get(KeyStroke.getKeyStroke("KP_RIGHT")), (Object)"caret-forward");
        harness.check(im.get(KeyStroke.getKeyStroke("shift ctrl KP_RIGHT")), (Object)"selection-end-line");
        harness.check(im.get(KeyStroke.getKeyStroke("COPY")), (Object)"copy-to-clipboard");
        harness.check(im.get(KeyStroke.getKeyStroke("shift HOME")), (Object)"selection-begin-line");
        harness.check(im.get(KeyStroke.getKeyStroke("RIGHT")), (Object)"caret-forward");
        harness.check(im.get(KeyStroke.getKeyStroke("shift ctrl LEFT")), (Object)"selection-begin-line");
        harness.check(im.get(KeyStroke.getKeyStroke("ctrl KP_LEFT")), (Object)"caret-begin-line");
        harness.check(im.get(KeyStroke.getKeyStroke("ctrl KP_RIGHT")), (Object)"caret-end-line");
        harness.check(im.get(KeyStroke.getKeyStroke("PASTE")), (Object)"paste-from-clipboard");
        harness.check(im.get(KeyStroke.getKeyStroke("shift ctrl RIGHT")), (Object)"selection-end-line");
        harness.check(im.get(KeyStroke.getKeyStroke("ctrl BACK_SLASH")), (Object)"unselect");
        harness.check(im.get(KeyStroke.getKeyStroke("ctrl A")), (Object)"select-all");
        harness.check(im.get(KeyStroke.getKeyStroke("shift KP_RIGHT")), (Object)"selection-forward");
        harness.check(im.get(KeyStroke.getKeyStroke("CUT")), (Object)"cut-to-clipboard");
        harness.check(im.get(KeyStroke.getKeyStroke("ctrl LEFT")), (Object)"caret-begin-line");
        harness.check(im.get(KeyStroke.getKeyStroke("BACK_SPACE")), (Object)"delete-previous");
        harness.check(im.get(KeyStroke.getKeyStroke("shift ctrl KP_LEFT")), (Object)"selection-begin-line");
        harness.check(im.get(KeyStroke.getKeyStroke("ctrl C")), (Object)"copy-to-clipboard");
        harness.check(im.get(KeyStroke.getKeyStroke("shift END")), (Object)"selection-end-line");
        harness.check(im.get(KeyStroke.getKeyStroke("ctrl RIGHT")), (Object)"caret-end-line");
        harness.check(im.get(KeyStroke.getKeyStroke("DELETE")), (Object)"delete-next");
        harness.check(im.get(KeyStroke.getKeyStroke("ENTER")), (Object)"notify-field-accept");
        harness.check(im.get(KeyStroke.getKeyStroke("shift LEFT")), (Object)"selection-backward");
        harness.checkPoint("PopupMenu");
        harness.check(defaults.get("PopupMenu.border") instanceof BorderUIResource.CompoundBorderUIResource);
        harness.check(defaults.get("PopupMenu.font"), new FontUIResource("Dialog", 0, 12));
        harness.check(defaults.get("PopupMenu.selectedWindowInputMapBindings") instanceof Object[]);
        harness.check(defaults.get("PopupMenu.selectedWindowInputMapBindings.RightToLeft") instanceof Object[]);
        harness.checkPoint("ProgressBar");
        harness.check(defaults.get("ProgressBar.border") instanceof BorderUIResource.LineBorderUIResource);
        harness.check(defaults.get("ProgressBar.cellLength"), new Integer(1));
        harness.check(defaults.get("ProgressBar.cellSpacing"), new Integer(0));
        harness.check(defaults.get("ProgressBar.cycleTime"), new Integer(3000));
        harness.check(defaults.get("ProgressBar.font"), new FontUIResource("Dialog", 0, 12));
        harness.check(defaults.get("ProgressBar.repaintInterval"), new Integer(50));
        harness.checkPoint("RadioButton");
        harness.check(defaults.get("RadioButton.border") instanceof BorderUIResource.CompoundBorderUIResource);
        harness.check(defaults.get("RadioButton.focusInputMap") instanceof InputMapUIResource);
        harness.check(defaults.get("RadioButton.font"), new FontUIResource("Dialog", 0, 12));
        harness.check(defaults.get("RadioButton.icon") instanceof Icon);
        harness.check(defaults.get("RadioButton.margin"), new InsetsUIResource(2, 2, 2, 2));
        harness.check(defaults.get("RadioButton.textIconGap"), new Integer(4));
        harness.check(defaults.get("RadioButton.textShiftOffset"), new Integer(0));
        harness.checkPoint("RadioButtonMenuItem");
        harness.check(defaults.get("RadioButtonMenuItem.acceleratorFont"), new FontUIResource("Dialog", 0, 12));
        harness.check(defaults.get("RadioButtonMenuItem.arrowIcon") instanceof Icon);
        harness.check(defaults.get("RadioButtonMenuItem.border") instanceof BasicBorders.MarginBorder);
        harness.check(defaults.get("RadioButtonMenuItem.borderPainted"), Boolean.FALSE);
        harness.check(defaults.get("RadioButtonMenuItem.checkIcon") instanceof Icon);
        harness.check(defaults.get("RadioButtonMenuItem.font"), new FontUIResource("Dialog", 0, 12));
        harness.check(defaults.get("RadioButtonMenuItem.margin"), new InsetsUIResource(2, 2, 2, 2));
        harness.check(defaults.get("RootPane.defaultButtonWindowKeyBindings") instanceof Object[]);
        harness.checkPoint("ScrollBar");
        harness.check(defaults.get("ScrollBar.background"), new ColorUIResource(224, 224, 224));
        harness.check(defaults.get("ScrollBar.maximumThumbSize"), new DimensionUIResource(4096, 4096));
        harness.check(defaults.get("ScrollBar.minimumThumbSize"), new DimensionUIResource(8, 8));
        harness.check(defaults.get("ScrollBar.width"), new Integer(16));
        harness.check(defaults.get("ScrollPane.ancestorInputMap") instanceof InputMapUIResource);
        harness.check(defaults.get("ScrollPane.ancestorInputMap.RightToLeft") instanceof InputMapUIResource);
        harness.check(defaults.get("ScrollPane.border") instanceof BasicBorders.FieldBorder);
        harness.check(defaults.get("ScrollPane.font"), new FontUIResource("Dialog", 0, 12));
        harness.checkPoint("Slider");
        InputMap map2 = (InputMap)defaults.get("Slider.focusInputMap");
        KeyStroke[] keys2 = map2.keys();
        InputMap focusInputMap = (InputMap)defaults.get("Slider.focusInputMap");
        List<KeyStroke> keyList = Arrays.asList(keys2);
        harness.check(keyList.contains(KeyStroke.getKeyStroke("LEFT")));
        harness.check(keyList.contains(KeyStroke.getKeyStroke("RIGHT")));
        harness.check(keyList.contains(KeyStroke.getKeyStroke("UP")));
        harness.check(keyList.contains(KeyStroke.getKeyStroke("DOWN")));
        harness.check(keyList.contains(KeyStroke.getKeyStroke("KP_LEFT")));
        harness.check(keyList.contains(KeyStroke.getKeyStroke("KP_RIGHT")));
        harness.check(keyList.contains(KeyStroke.getKeyStroke("KP_UP")));
        harness.check(keyList.contains(KeyStroke.getKeyStroke("KP_DOWN")));
        harness.check(keyList.contains(KeyStroke.getKeyStroke("HOME")));
        harness.check(keyList.contains(KeyStroke.getKeyStroke("END")));
        harness.check(keyList.contains(KeyStroke.getKeyStroke("PAGE_UP")));
        harness.check(keyList.contains(KeyStroke.getKeyStroke("PAGE_DOWN")));
        harness.check(focusInputMap.get(KeyStroke.getKeyStroke("LEFT")), (Object)"negativeUnitIncrement");
        harness.check(focusInputMap.get(KeyStroke.getKeyStroke("RIGHT")), (Object)"positiveUnitIncrement");
        harness.check(focusInputMap.get(KeyStroke.getKeyStroke("UP")), (Object)"positiveUnitIncrement");
        harness.check(focusInputMap.get(KeyStroke.getKeyStroke("DOWN")), (Object)"negativeUnitIncrement");
        harness.check(focusInputMap.get(KeyStroke.getKeyStroke("KP_LEFT")), (Object)"negativeUnitIncrement");
        harness.check(focusInputMap.get(KeyStroke.getKeyStroke("KP_RIGHT")), (Object)"positiveUnitIncrement");
        harness.check(focusInputMap.get(KeyStroke.getKeyStroke("KP_UP")), (Object)"positiveUnitIncrement");
        harness.check(focusInputMap.get(KeyStroke.getKeyStroke("KP_DOWN")), (Object)"negativeUnitIncrement");
        harness.check(focusInputMap.get(KeyStroke.getKeyStroke("HOME")), (Object)"minScroll");
        harness.check(focusInputMap.get(KeyStroke.getKeyStroke("END")), (Object)"maxScroll");
        harness.check(focusInputMap.get(KeyStroke.getKeyStroke("PAGE_UP")), (Object)"positiveBlockIncrement");
        harness.check(focusInputMap.get(KeyStroke.getKeyStroke("PAGE_DOWN")), (Object)"negativeBlockIncrement");
        InputMap rightToLeftMap = (InputMap)defaults.get("Slider.focusInputMap.RightToLeft");
        keys2 = rightToLeftMap != null ? rightToLeftMap.keys() : new KeyStroke[]{};
        keyList = Arrays.asList(keys2);
        harness.check(keyList.contains(KeyStroke.getKeyStroke("RIGHT")));
        harness.check(keyList.contains(KeyStroke.getKeyStroke("KP_RIGHT")));
        harness.check(keyList.contains(KeyStroke.getKeyStroke("LEFT")));
        harness.check(keyList.contains(KeyStroke.getKeyStroke("KP_LEFT")));
        if (rightToLeftMap == null) {
            rightToLeftMap = new InputMap();
        }
        harness.check(rightToLeftMap.get(KeyStroke.getKeyStroke("RIGHT")), (Object)"negativeUnitIncrement");
        harness.check(rightToLeftMap.get(KeyStroke.getKeyStroke("KP_RIGHT")), (Object)"negativeUnitIncrement");
        harness.check(rightToLeftMap.get(KeyStroke.getKeyStroke("LEFT")), (Object)"positiveUnitIncrement");
        harness.check(rightToLeftMap.get(KeyStroke.getKeyStroke("KP_LEFT")), (Object)"positiveUnitIncrement");
        harness.check(defaults.get("Slider.focusInsets"), new InsetsUIResource(2, 2, 2, 2));
        harness.checkPoint("Spinner");
        harness.check(defaults.get("Spinner.ancestorInputMap") instanceof InputMapUIResource);
        harness.check(defaults.get("Spinner.arrowButtonSize"), new DimensionUIResource(16, 5));
        harness.check(defaults.get("Spinner.border") instanceof BasicBorders.FieldBorder);
        harness.check(defaults.get("Spinner.editorBorderPainted"), Boolean.FALSE);
        harness.check(defaults.get("Spinner.font"), new FontUIResource("MonoSpaced", 0, 12));
        harness.checkPoint("SplitPane");
        harness.check(defaults.get("SplitPane.ancestorInputMap") instanceof InputMapUIResource);
        harness.check(defaults.get("SplitPane.border") instanceof BasicBorders.SplitPaneBorder);
        harness.check(defaults.get("SplitPane.dividerSize"), new Integer(7));
        harness.checkPoint("SplitPaneDivider");
        harness.check(defaults.get("SplitPaneDivider.border") instanceof Border);
        harness.checkPoint("TabbedPane");
        harness.check(defaults.get("TabbedPane.ancestorInputMap") instanceof InputMapUIResource);
        harness.check(defaults.get("TabbedPane.contentBorderInsets"), new InsetsUIResource(2, 2, 3, 3));
        harness.check(defaults.get("TabbedPane.focusInputMap") instanceof InputMapUIResource);
        Object tab = UIManager.get("TabbedPane.focusInputMap");
        InputMapUIResource tabim = (InputMapUIResource)tab;
        harness.check(tabim.keys().length == 10);
        harness.check(tabim.get(KeyStroke.getKeyStroke("ctrl DOWN")), (Object)"requestFocusForVisibleComponent");
        harness.check(tabim.get(KeyStroke.getKeyStroke("KP_UP")), (Object)"navigateUp");
        harness.check(tabim.get(KeyStroke.getKeyStroke("LEFT")), (Object)"navigateLeft");
        harness.check(tabim.get(KeyStroke.getKeyStroke("ctrl KP_DOWN")), (Object)"requestFocusForVisibleComponent");
        harness.check(tabim.get(KeyStroke.getKeyStroke("UP")), (Object)"navigateUp");
        harness.check(tabim.get(KeyStroke.getKeyStroke("KP_DOWN")), (Object)"navigateDown");
        harness.check(tabim.get(KeyStroke.getKeyStroke("KP_LEFT")), (Object)"navigateLeft");
        harness.check(tabim.get(KeyStroke.getKeyStroke("RIGHT")), (Object)"navigateRight");
        harness.check(tabim.get(KeyStroke.getKeyStroke("KP_RIGHT")), (Object)"navigateRight");
        harness.check(tabim.get(KeyStroke.getKeyStroke("DOWN")), (Object)"navigateDown");
        harness.check(defaults.get("TabbedPane.font"), new FontUIResource("Dialog", 0, 12));
        harness.check(defaults.get("TabbedPane.selectedTabPadInsets"), new InsetsUIResource(2, 2, 2, 1));
        harness.check(defaults.get("TabbedPane.tabAreaInsets"), new InsetsUIResource(3, 2, 0, 2));
        harness.check(defaults.get("TabbedPane.tabInsets"), new InsetsUIResource(0, 4, 1, 4));
        harness.check(defaults.get("TabbedPane.tabRunOverlay"), new Integer(2));
        harness.check(defaults.get("TabbedPane.textIconGap"), new Integer(4));
        harness.checkPoint("Table");
        harness.check(defaults.get("Table.ancestorInputMap") instanceof InputMapUIResource);
        harness.check(defaults.get("Table.ancestorInputMap.RightToLeft") instanceof InputMapUIResource);
        harness.check(defaults.get("Table.focusCellHighlightBorder") instanceof BorderUIResource.LineBorderUIResource);
        harness.check(defaults.get("Table.font"), new FontUIResource("Dialog", 0, 12));
        harness.check(defaults.get("Table.gridColor"), new ColorUIResource(128, 128, 128));
        harness.check(defaults.get("Table.scrollPaneBorder") instanceof BorderUIResource.BevelBorderUIResource);
        harness.checkPoint("TableHeader");
        harness.check(defaults.get("TableHeader.cellBorder"), null);
        harness.check(defaults.get("TableHeader.font"), new FontUIResource("Dialog", 0, 12));
        harness.checkPoint("TextArea");
        harness.check(defaults.get("TextArea.border") instanceof BasicBorders.MarginBorder);
        harness.check(defaults.get("TextArea.caretBlinkRate"), new Integer(500));
        harness.check(defaults.get("TextArea.font"), new FontUIResource("MonoSpaced", 0, 12));
        harness.check(defaults.get("TextArea.margin"), new InsetsUIResource(0, 0, 0, 0));
        harness.check(UIManager.get("TextArea.focusInputMap") instanceof InputMapUIResource);
        Object ta = UIManager.get("TextArea.focusInputMap");
        InputMapUIResource taim = (InputMapUIResource)ta;
        harness.check(taim.keys().length == 55);
        harness.check(taim.get(KeyStroke.getKeyStroke("shift UP")), (Object)"selection-up");
        harness.check(taim.get(KeyStroke.getKeyStroke("ctrl RIGHT")), (Object)"caret-next-word");
        harness.check(taim.get(KeyStroke.getKeyStroke("shift ctrl LEFT")), (Object)"selection-previous-word");
        harness.check(taim.get(KeyStroke.getKeyStroke("shift KP_UP")), (Object)"selection-up");
        harness.check(taim.get(KeyStroke.getKeyStroke("DOWN")), (Object)"caret-down");
        harness.check(taim.get(KeyStroke.getKeyStroke("shift ctrl T")), (Object)"previous-link-action");
        harness.check(taim.get(KeyStroke.getKeyStroke("ctrl LEFT")), (Object)"caret-previous-word");
        harness.check(taim.get(KeyStroke.getKeyStroke("CUT")), (Object)"cut-to-clipboard");
        harness.check(taim.get(KeyStroke.getKeyStroke("END")), (Object)"caret-end-line");
        harness.check(taim.get(KeyStroke.getKeyStroke("shift PAGE_UP")), (Object)"selection-page-up");
        harness.check(taim.get(KeyStroke.getKeyStroke("KP_UP")), (Object)"caret-up");
        harness.check(taim.get(KeyStroke.getKeyStroke("DELETE")), (Object)"delete-next");
        harness.check(taim.get(KeyStroke.getKeyStroke("ctrl HOME")), (Object)"caret-begin");
        harness.check(taim.get(KeyStroke.getKeyStroke("shift LEFT")), (Object)"selection-backward");
        harness.check(taim.get(KeyStroke.getKeyStroke("ctrl END")), (Object)"caret-end");
        harness.check(taim.get(KeyStroke.getKeyStroke("BACK_SPACE")), (Object)"delete-previous");
        harness.check(taim.get(KeyStroke.getKeyStroke("shift ctrl RIGHT")), (Object)"selection-next-word");
        harness.check(taim.get(KeyStroke.getKeyStroke("LEFT")), (Object)"caret-backward");
        harness.check(taim.get(KeyStroke.getKeyStroke("KP_LEFT")), (Object)"caret-backward");
        harness.check(taim.get(KeyStroke.getKeyStroke("shift KP_RIGHT")), (Object)"selection-forward");
        harness.check(taim.get(KeyStroke.getKeyStroke("ctrl SPACE")), (Object)"activate-link-action");
        harness.check(taim.get(KeyStroke.getKeyStroke("ctrl H")), (Object)"delete-previous");
        harness.check(taim.get(KeyStroke.getKeyStroke("ctrl BACK_SLASH")), (Object)"unselect");
        harness.check(taim.get(KeyStroke.getKeyStroke("ENTER")), (Object)"insert-break");
        harness.check(taim.get(KeyStroke.getKeyStroke("shift HOME")), (Object)"selection-begin-line");
        harness.check(taim.get(KeyStroke.getKeyStroke("RIGHT")), (Object)"caret-forward");
        harness.check(taim.get(KeyStroke.getKeyStroke("shift ctrl PAGE_UP")), (Object)"selection-page-left");
        harness.check(taim.get(KeyStroke.getKeyStroke("shift DOWN")), (Object)"selection-down");
        harness.check(taim.get(KeyStroke.getKeyStroke("PAGE_DOWN")), (Object)"page-down");
        harness.check(taim.get(KeyStroke.getKeyStroke("shift KP_LEFT")), (Object)"selection-backward");
        harness.check(taim.get(KeyStroke.getKeyStroke("shift ctrl O")), (Object)"toggle-componentOrientation");
        harness.check(taim.get(KeyStroke.getKeyStroke("ctrl X")), (Object)"cut-to-clipboard");
        harness.check(taim.get(KeyStroke.getKeyStroke("shift ctrl PAGE_DOWN")), (Object)"selection-page-right");
        harness.check(taim.get(KeyStroke.getKeyStroke("ctrl C")), (Object)"copy-to-clipboard");
        harness.check(taim.get(KeyStroke.getKeyStroke("ctrl KP_RIGHT")), (Object)"caret-next-word");
        harness.check(taim.get(KeyStroke.getKeyStroke("shift END")), (Object)"selection-end-line");
        harness.check(taim.get(KeyStroke.getKeyStroke("ctrl KP_LEFT")), (Object)"caret-previous-word");
        harness.check(taim.get(KeyStroke.getKeyStroke("HOME")), (Object)"caret-begin-line");
        harness.check(taim.get(KeyStroke.getKeyStroke("ctrl V")), (Object)"paste-from-clipboard");
        harness.check(taim.get(KeyStroke.getKeyStroke("KP_DOWN")), (Object)"caret-down");
        harness.check(taim.get(KeyStroke.getKeyStroke("ctrl A")), (Object)"select-all");
        harness.check(taim.get(KeyStroke.getKeyStroke("shift RIGHT")), (Object)"selection-forward");
        harness.check(taim.get(KeyStroke.getKeyStroke("shift ctrl END")), (Object)"selection-end");
        harness.check(taim.get(KeyStroke.getKeyStroke("COPY")), (Object)"copy-to-clipboard");
        harness.check(taim.get(KeyStroke.getKeyStroke("shift ctrl KP_LEFT")), (Object)"selection-previous-word");
        harness.check(taim.get(KeyStroke.getKeyStroke("ctrl T")), (Object)"next-link-action");
        harness.check(taim.get(KeyStroke.getKeyStroke("shift KP_DOWN")), (Object)"selection-down");
        harness.check(taim.get(KeyStroke.getKeyStroke("TAB")), (Object)"insert-tab");
        harness.check(taim.get(KeyStroke.getKeyStroke("UP")), (Object)"caret-up");
        harness.check(taim.get(KeyStroke.getKeyStroke("shift ctrl HOME")), (Object)"selection-begin");
        harness.check(taim.get(KeyStroke.getKeyStroke("shift PAGE_DOWN")), (Object)"selection-page-down");
        harness.check(taim.get(KeyStroke.getKeyStroke("KP_RIGHT")), (Object)"caret-forward");
        harness.check(taim.get(KeyStroke.getKeyStroke("shift ctrl KP_RIGHT")), (Object)"selection-next-word");
        harness.check(taim.get(KeyStroke.getKeyStroke("PAGE_UP")), (Object)"page-up");
        harness.check(taim.get(KeyStroke.getKeyStroke("PASTE")), (Object)"paste-from-clipboard");
        harness.checkPoint("TextField");
        harness.check(defaults.get("TextField.border") instanceof BasicBorders.FieldBorder);
        harness.check(defaults.get("TextField.caretBlinkRate"), new Integer(500));
        harness.check(defaults.get("TextField.font"), new FontUIResource("SansSerif", 0, 12));
        harness.check(defaults.get("TextField.margin"), new InsetsUIResource(0, 0, 0, 0));
        harness.check(UIManager.get("TextField.focusInputMap") instanceof InputMapUIResource);
        Object tf = UIManager.get("TextField.focusInputMap");
        InputMapUIResource tfim = (InputMapUIResource)tf;
        harness.check(tfim.keys().length == 33);
        harness.check(tfim.get(KeyStroke.getKeyStroke("ENTER")), (Object)"notify-field-accept");
        harness.check(tfim.get(KeyStroke.getKeyStroke("LEFT")), (Object)"caret-backward");
        harness.check(tfim.get(KeyStroke.getKeyStroke("RIGHT")), (Object)"caret-forward");
        harness.check(tfim.get(KeyStroke.getKeyStroke("BACK_SPACE")), (Object)"delete-previous");
        harness.check(tfim.get(KeyStroke.getKeyStroke("ctrl X")), (Object)"cut-to-clipboard");
        harness.check(tfim.get(KeyStroke.getKeyStroke("ctrl C")), (Object)"copy-to-clipboard");
        harness.check(tfim.get(KeyStroke.getKeyStroke("ctrl V")), (Object)"paste-from-clipboard");
        harness.check(tfim.get(KeyStroke.getKeyStroke("shift LEFT")), (Object)"selection-backward");
        harness.check(tfim.get(KeyStroke.getKeyStroke("shift RIGHT")), (Object)"selection-forward");
        harness.check(tfim.get(KeyStroke.getKeyStroke("HOME")), (Object)"caret-begin-line");
        harness.check(tfim.get(KeyStroke.getKeyStroke("END")), (Object)"caret-end-line");
        harness.check(tfim.get(KeyStroke.getKeyStroke("DELETE")), (Object)"delete-next");
        harness.check(tfim.get(KeyStroke.getKeyStroke("shift ctrl O")), (Object)"toggle-componentOrientation");
        harness.check(tfim.get(KeyStroke.getKeyStroke("shift KP_LEFT")), (Object)"selection-backward");
        harness.check(tfim.get(KeyStroke.getKeyStroke("ctrl H")), (Object)"delete-previous");
        harness.check(tfim.get(KeyStroke.getKeyStroke("KP_LEFT")), (Object)"caret-backward");
        harness.check(tfim.get(KeyStroke.getKeyStroke("KP_RIGHT")), (Object)"caret-forward");
        harness.check(tfim.get(KeyStroke.getKeyStroke("shift ctrl KP_RIGHT")), (Object)"selection-next-word");
        harness.check(tfim.get(KeyStroke.getKeyStroke("COPY")), (Object)"copy-to-clipboard");
        harness.check(tfim.get(KeyStroke.getKeyStroke("shift HOME")), (Object)"selection-begin-line");
        harness.check(tfim.get(KeyStroke.getKeyStroke("shift ctrl LEFT")), (Object)"selection-previous-word");
        harness.check(tfim.get(KeyStroke.getKeyStroke("ctrl KP_LEFT")), (Object)"caret-previous-word");
        harness.check(tfim.get(KeyStroke.getKeyStroke("ctrl KP_RIGHT")), (Object)"caret-next-word");
        harness.check(tfim.get(KeyStroke.getKeyStroke("PASTE")), (Object)"paste-from-clipboard");
        harness.check(tfim.get(KeyStroke.getKeyStroke("shift ctrl RIGHT")), (Object)"selection-next-word");
        harness.check(tfim.get(KeyStroke.getKeyStroke("ctrl BACK_SLASH")), (Object)"unselect");
        harness.check(tfim.get(KeyStroke.getKeyStroke("ctrl A")), (Object)"select-all");
        harness.check(tfim.get(KeyStroke.getKeyStroke("shift KP_RIGHT")), (Object)"selection-forward");
        harness.check(tfim.get(KeyStroke.getKeyStroke("CUT")), (Object)"cut-to-clipboard");
        harness.check(tfim.get(KeyStroke.getKeyStroke("ctrl LEFT")), (Object)"caret-previous-word");
        harness.check(tfim.get(KeyStroke.getKeyStroke("shift ctrl KP_LEFT")), (Object)"selection-previous-word");
        harness.check(tfim.get(KeyStroke.getKeyStroke("shift END")), (Object)"selection-end-line");
        harness.check(tfim.get(KeyStroke.getKeyStroke("ctrl RIGHT")), (Object)"caret-next-word");
        harness.checkPoint("TextPane");
        harness.check(defaults.get("TextPane.background"), new ColorUIResource(255, 255, 255));
        harness.check(defaults.get("TextPane.border") instanceof BasicBorders.MarginBorder);
        harness.check(defaults.get("TextPane.caretBlinkRate"), new Integer(500));
        harness.check(defaults.get("TextPane.font"), new FontUIResource("Serif", 0, 12));
        harness.check(defaults.get("TextPane.margin"), new InsetsUIResource(3, 3, 3, 3));
        harness.check(UIManager.get("TextPane.focusInputMap") instanceof InputMapUIResource);
        Object tp = UIManager.get("TextPane.focusInputMap");
        InputMapUIResource tpim = (InputMapUIResource)tp;
        harness.check(tpim.keys().length == 55);
        harness.check(tpim.get(KeyStroke.getKeyStroke("shift UP")), (Object)"selection-up");
        harness.check(tpim.get(KeyStroke.getKeyStroke("ctrl RIGHT")), (Object)"caret-next-word");
        harness.check(tpim.get(KeyStroke.getKeyStroke("shift ctrl LEFT")), (Object)"selection-previous-word");
        harness.check(tpim.get(KeyStroke.getKeyStroke("shift KP_UP")), (Object)"selection-up");
        harness.check(tpim.get(KeyStroke.getKeyStroke("DOWN")), (Object)"caret-down");
        harness.check(tpim.get(KeyStroke.getKeyStroke("shift ctrl T")), (Object)"previous-link-action");
        harness.check(tpim.get(KeyStroke.getKeyStroke("ctrl LEFT")), (Object)"caret-previous-word");
        harness.check(tpim.get(KeyStroke.getKeyStroke("CUT")), (Object)"cut-to-clipboard");
        harness.check(tpim.get(KeyStroke.getKeyStroke("END")), (Object)"caret-end-line");
        harness.check(tpim.get(KeyStroke.getKeyStroke("shift PAGE_UP")), (Object)"selection-page-up");
        harness.check(tpim.get(KeyStroke.getKeyStroke("KP_UP")), (Object)"caret-up");
        harness.check(tpim.get(KeyStroke.getKeyStroke("DELETE")), (Object)"delete-next");
        harness.check(tpim.get(KeyStroke.getKeyStroke("ctrl HOME")), (Object)"caret-begin");
        harness.check(tpim.get(KeyStroke.getKeyStroke("shift LEFT")), (Object)"selection-backward");
        harness.check(tpim.get(KeyStroke.getKeyStroke("ctrl END")), (Object)"caret-end");
        harness.check(tpim.get(KeyStroke.getKeyStroke("BACK_SPACE")), (Object)"delete-previous");
        harness.check(tpim.get(KeyStroke.getKeyStroke("shift ctrl RIGHT")), (Object)"selection-next-word");
        harness.check(tpim.get(KeyStroke.getKeyStroke("LEFT")), (Object)"caret-backward");
        harness.check(tpim.get(KeyStroke.getKeyStroke("KP_LEFT")), (Object)"caret-backward");
        harness.check(tpim.get(KeyStroke.getKeyStroke("shift KP_RIGHT")), (Object)"selection-forward");
        harness.check(tpim.get(KeyStroke.getKeyStroke("ctrl SPACE")), (Object)"activate-link-action");
        harness.check(tpim.get(KeyStroke.getKeyStroke("ctrl H")), (Object)"delete-previous");
        harness.check(tpim.get(KeyStroke.getKeyStroke("ctrl BACK_SLASH")), (Object)"unselect");
        harness.check(tpim.get(KeyStroke.getKeyStroke("ENTER")), (Object)"insert-break");
        harness.check(tpim.get(KeyStroke.getKeyStroke("shift HOME")), (Object)"selection-begin-line");
        harness.check(tpim.get(KeyStroke.getKeyStroke("RIGHT")), (Object)"caret-forward");
        harness.check(tpim.get(KeyStroke.getKeyStroke("shift ctrl PAGE_UP")), (Object)"selection-page-left");
        harness.check(tpim.get(KeyStroke.getKeyStroke("shift DOWN")), (Object)"selection-down");
        harness.check(tpim.get(KeyStroke.getKeyStroke("PAGE_DOWN")), (Object)"page-down");
        harness.check(tpim.get(KeyStroke.getKeyStroke("shift KP_LEFT")), (Object)"selection-backward");
        harness.check(tpim.get(KeyStroke.getKeyStroke("shift ctrl O")), (Object)"toggle-componentOrientation");
        harness.check(tpim.get(KeyStroke.getKeyStroke("ctrl X")), (Object)"cut-to-clipboard");
        harness.check(tpim.get(KeyStroke.getKeyStroke("shift ctrl PAGE_DOWN")), (Object)"selection-page-right");
        harness.check(tpim.get(KeyStroke.getKeyStroke("ctrl C")), (Object)"copy-to-clipboard");
        harness.check(tpim.get(KeyStroke.getKeyStroke("ctrl KP_RIGHT")), (Object)"caret-next-word");
        harness.check(tpim.get(KeyStroke.getKeyStroke("shift END")), (Object)"selection-end-line");
        harness.check(tpim.get(KeyStroke.getKeyStroke("ctrl KP_LEFT")), (Object)"caret-previous-word");
        harness.check(tpim.get(KeyStroke.getKeyStroke("HOME")), (Object)"caret-begin-line");
        harness.check(tpim.get(KeyStroke.getKeyStroke("ctrl V")), (Object)"paste-from-clipboard");
        harness.check(tpim.get(KeyStroke.getKeyStroke("KP_DOWN")), (Object)"caret-down");
        harness.check(tpim.get(KeyStroke.getKeyStroke("ctrl A")), (Object)"select-all");
        harness.check(tpim.get(KeyStroke.getKeyStroke("shift RIGHT")), (Object)"selection-forward");
        harness.check(tpim.get(KeyStroke.getKeyStroke("shift ctrl END")), (Object)"selection-end");
        harness.check(tpim.get(KeyStroke.getKeyStroke("COPY")), (Object)"copy-to-clipboard");
        harness.check(tpim.get(KeyStroke.getKeyStroke("shift ctrl KP_LEFT")), (Object)"selection-previous-word");
        harness.check(tpim.get(KeyStroke.getKeyStroke("ctrl T")), (Object)"next-link-action");
        harness.check(tpim.get(KeyStroke.getKeyStroke("shift KP_DOWN")), (Object)"selection-down");
        harness.check(tpim.get(KeyStroke.getKeyStroke("TAB")), (Object)"insert-tab");
        harness.check(tpim.get(KeyStroke.getKeyStroke("UP")), (Object)"caret-up");
        harness.check(tpim.get(KeyStroke.getKeyStroke("shift ctrl HOME")), (Object)"selection-begin");
        harness.check(tpim.get(KeyStroke.getKeyStroke("shift PAGE_DOWN")), (Object)"selection-page-down");
        harness.check(tpim.get(KeyStroke.getKeyStroke("KP_RIGHT")), (Object)"caret-forward");
        harness.check(tpim.get(KeyStroke.getKeyStroke("shift ctrl KP_RIGHT")), (Object)"selection-next-word");
        harness.check(tpim.get(KeyStroke.getKeyStroke("PAGE_UP")), (Object)"page-up");
        harness.check(tpim.get(KeyStroke.getKeyStroke("PASTE")), (Object)"paste-from-clipboard");
        harness.checkPoint("TitledBorder");
        harness.check(defaults.get("TitledBorder.border") instanceof BorderUIResource.EtchedBorderUIResource);
        harness.check(defaults.get("TitledBorder.font"), new FontUIResource("Dialog", 0, 12));
        harness.checkPoint("ToggleButton");
        harness.check(defaults.get("ToggleButton.border") instanceof BorderUIResource.CompoundBorderUIResource);
        harness.check(defaults.get("ToggleButton.focusInputMap") instanceof InputMapUIResource);
        Object to2 = UIManager.get("ToggleButton.focusInputMap");
        InputMapUIResource toim = (InputMapUIResource)to2;
        harness.check(toim.keys().length == 2);
        harness.check(toim.get(KeyStroke.getKeyStroke("SPACE")), (Object)"pressed");
        harness.check(toim.get(KeyStroke.getKeyStroke("released SPACE")), (Object)"released");
        harness.check(defaults.get("ToggleButton.font"), new FontUIResource("Dialog", 0, 12));
        harness.check(defaults.get("ToggleButton.margin"), new InsetsUIResource(2, 14, 2, 14));
        harness.check(defaults.get("ToggleButton.textIconGap"), new Integer(4));
        harness.check(defaults.get("ToggleButton.textShiftOffset"), new Integer(0));
        harness.checkPoint("ToolBar");
        harness.check(defaults.get("ToolBar.ancestorInputMap") instanceof InputMapUIResource);
        harness.check(defaults.get("ToolBar.border") instanceof BorderUIResource.EtchedBorderUIResource);
        harness.check(defaults.get("ToolBar.dockingForeground"), new ColorUIResource(255, 0, 0));
        harness.check(defaults.get("ToolBar.floatingForeground"), new ColorUIResource(64, 64, 64));
        harness.check(defaults.get("ToolBar.font"), new FontUIResource("Dialog", 0, 12));
        harness.check(defaults.get("ToolBar.separatorSize"), new DimensionUIResource(10, 10));
        harness.checkPoint("ToolTip");
        harness.check(defaults.get("ToolTip.border") instanceof BorderUIResource.LineBorderUIResource);
        harness.check(defaults.get("ToolTip.font"), new FontUIResource("SansSerif", 0, 12));
        harness.checkPoint("Tree");
        harness.check(defaults.get("Tree.ancestorInputMap") instanceof InputMapUIResource);
        harness.check(defaults.get("Tree.changeSelectionWithFocus"), Boolean.TRUE);
        harness.check(defaults.get("Tree.drawsFocusBorderAroundIcon"), Boolean.FALSE);
        harness.check(defaults.get("Tree.editorBorder") instanceof BorderUIResource.LineBorderUIResource);
        harness.check(defaults.get("Tree.focusInputMap") instanceof InputMapUIResource);
        Object tr = UIManager.get("Tree.focusInputMap");
        InputMapUIResource trim = (InputMapUIResource)tr;
        harness.check(trim.keys().length == 56);
        harness.check(trim.get(KeyStroke.getKeyStroke("ctrl DOWN")), (Object)"selectNextChangeLead");
        harness.check(trim.get(KeyStroke.getKeyStroke("shift UP")), (Object)"selectPreviousExtendSelection");
        harness.check(trim.get(KeyStroke.getKeyStroke("ctrl RIGHT")), (Object)"scrollRight");
        harness.check(trim.get(KeyStroke.getKeyStroke("shift KP_UP")), (Object)"selectPreviousExtendSelection");
        harness.check(trim.get(KeyStroke.getKeyStroke("DOWN")), (Object)"selectNext");
        harness.check(trim.get(KeyStroke.getKeyStroke("ctrl UP")), (Object)"selectPreviousChangeLead");
        harness.check(trim.get(KeyStroke.getKeyStroke("ctrl LEFT")), (Object)"scrollLeft");
        harness.check(trim.get(KeyStroke.getKeyStroke("CUT")), (Object)"cut");
        harness.check(trim.get(KeyStroke.getKeyStroke("END")), (Object)"selectLast");
        harness.check(trim.get(KeyStroke.getKeyStroke("shift PAGE_UP")), (Object)"scrollUpExtendSelection");
        harness.check(trim.get(KeyStroke.getKeyStroke("KP_UP")), (Object)"selectPrevious");
        harness.check(trim.get(KeyStroke.getKeyStroke("shift ctrl UP")), (Object)"selectPreviousExtendSelection");
        harness.check(trim.get(KeyStroke.getKeyStroke("ctrl HOME")), (Object)"selectFirstChangeLead");
        harness.check(trim.get(KeyStroke.getKeyStroke("ctrl END")), (Object)"selectLastChangeLead");
        harness.check(trim.get(KeyStroke.getKeyStroke("ctrl PAGE_DOWN")), (Object)"scrollDownChangeLead");
        harness.check(trim.get(KeyStroke.getKeyStroke("LEFT")), (Object)"selectParent");
        harness.check(trim.get(KeyStroke.getKeyStroke("ctrl PAGE_UP")), (Object)"scrollUpChangeLead");
        harness.check(trim.get(KeyStroke.getKeyStroke("KP_LEFT")), (Object)"selectParent");
        harness.check(trim.get(KeyStroke.getKeyStroke("SPACE")), (Object)"addToSelection");
        harness.check(trim.get(KeyStroke.getKeyStroke("ctrl SPACE")), (Object)"toggleAndAnchor");
        harness.check(trim.get(KeyStroke.getKeyStroke("shift SPACE")), (Object)"extendTo");
        harness.check(trim.get(KeyStroke.getKeyStroke("shift ctrl SPACE")), (Object)"moveSelectionTo");
        harness.check(trim.get(KeyStroke.getKeyStroke("ADD")), (Object)"expand");
        harness.check(trim.get(KeyStroke.getKeyStroke("ctrl BACK_SLASH")), (Object)"clearSelection");
        harness.check(trim.get(KeyStroke.getKeyStroke("shift ctrl DOWN")), (Object)"selectNextExtendSelection");
        harness.check(trim.get(KeyStroke.getKeyStroke("shift HOME")), (Object)"selectFirstExtendSelection");
        harness.check(trim.get(KeyStroke.getKeyStroke("RIGHT")), (Object)"selectChild");
        harness.check(trim.get(KeyStroke.getKeyStroke("shift ctrl PAGE_UP")), (Object)"scrollUpExtendSelection");
        harness.check(trim.get(KeyStroke.getKeyStroke("shift DOWN")), (Object)"selectNextExtendSelection");
        harness.check(trim.get(KeyStroke.getKeyStroke("PAGE_DOWN")), (Object)"scrollDownChangeSelection");
        harness.check(trim.get(KeyStroke.getKeyStroke("shift ctrl KP_UP")), (Object)"selectPreviousExtendSelection");
        harness.check(trim.get(KeyStroke.getKeyStroke("SUBTRACT")), (Object)"collapse");
        harness.check(trim.get(KeyStroke.getKeyStroke("ctrl X")), (Object)"cut");
        harness.check(trim.get(KeyStroke.getKeyStroke("shift ctrl PAGE_DOWN")), (Object)"scrollDownExtendSelection");
        harness.check(trim.get(KeyStroke.getKeyStroke("ctrl SLASH")), (Object)"selectAll");
        harness.check(trim.get(KeyStroke.getKeyStroke("ctrl C")), (Object)"copy");
        harness.check(trim.get(KeyStroke.getKeyStroke("ctrl KP_RIGHT")), (Object)"scrollRight");
        harness.check(trim.get(KeyStroke.getKeyStroke("shift END")), (Object)"selectLastExtendSelection");
        harness.check(trim.get(KeyStroke.getKeyStroke("shift ctrl KP_DOWN")), (Object)"selectNextExtendSelection");
        harness.check(trim.get(KeyStroke.getKeyStroke("ctrl KP_LEFT")), (Object)"scrollLeft");
        harness.check(trim.get(KeyStroke.getKeyStroke("HOME")), (Object)"selectFirst");
        harness.check(trim.get(KeyStroke.getKeyStroke("ctrl V")), (Object)"paste");
        harness.check(trim.get(KeyStroke.getKeyStroke("KP_DOWN")), (Object)"selectNext");
        harness.check(trim.get(KeyStroke.getKeyStroke("ctrl A")), (Object)"selectAll");
        harness.check(trim.get(KeyStroke.getKeyStroke("ctrl KP_DOWN")), (Object)"selectNextChangeLead");
        harness.check(trim.get(KeyStroke.getKeyStroke("shift ctrl END")), (Object)"selectLastExtendSelection");
        harness.check(trim.get(KeyStroke.getKeyStroke("COPY")), (Object)"copy");
        harness.check(trim.get(KeyStroke.getKeyStroke("ctrl KP_UP")), (Object)"selectPreviousChangeLead");
        harness.check(trim.get(KeyStroke.getKeyStroke("shift KP_DOWN")), (Object)"selectNextExtendSelection");
        harness.check(trim.get(KeyStroke.getKeyStroke("UP")), (Object)"selectPrevious");
        harness.check(trim.get(KeyStroke.getKeyStroke("shift ctrl HOME")), (Object)"selectFirstExtendSelection");
        harness.check(trim.get(KeyStroke.getKeyStroke("shift PAGE_DOWN")), (Object)"scrollDownExtendSelection");
        harness.check(trim.get(KeyStroke.getKeyStroke("KP_RIGHT")), (Object)"selectChild");
        harness.check(trim.get(KeyStroke.getKeyStroke("F2")), (Object)"startEditing");
        harness.check(trim.get(KeyStroke.getKeyStroke("PAGE_UP")), (Object)"scrollUpChangeSelection");
        harness.check(trim.get(KeyStroke.getKeyStroke("PASTE")), (Object)"paste");
        harness.check(defaults.get("Tree.font"), new FontUIResource("Dialog", 0, 12));
        harness.check(defaults.get("Tree.hash"), new ColorUIResource(128, 128, 128));
        harness.check(defaults.get("Tree.leftChildIndent"), new Integer(7));
        harness.check(defaults.get("Tree.rightChildIndent"), new Integer(13));
        harness.check(defaults.get("Tree.rowHeight"), new Integer(16));
        harness.check(defaults.get("Tree.scrollsOnExpand"), Boolean.TRUE);
        harness.check(defaults.get("Tree.selectionBorderColor"), new ColorUIResource(0, 0, 0));
        harness.check(defaults.get("Tree.focusInputMap.RightToLeft") instanceof InputMapUIResource);
        harness.checkPoint("Viewport");
        harness.check(defaults.get("Viewport.font"), new FontUIResource("Dialog", 0, 12));
    }
}

