/*
 * Decompiled with CFR 0.152.
 */
package gnu.testlet.javax.swing.SwingUtilities;

import gnu.testlet.TestHarness;
import gnu.testlet.Testlet;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Rectangle;
import javax.swing.Icon;
import javax.swing.JLabel;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.plaf.basic.BasicIconFactory;

public class layoutCompoundLabel
implements Testlet,
SwingConstants {
    @Override
    public void test(TestHarness harness) {
        this.test1(harness);
    }

    public void test1(TestHarness harness) {
        harness.checkPoint("(JComponent)");
        this.test1TextOnly(harness);
        this.test1IconOnly(harness);
        this.test1TextAndIconCL(harness);
        this.test1TextAndIconCR(harness);
    }

    public void test1TextOnly(TestHarness harness) {
        JLabel label = new JLabel("X");
        Font font = new Font("Dialog", 0, 12);
        FontMetrics fm = label.getFontMetrics(font);
        String text2 = "X";
        String displayText = "";
        int ww = fm.stringWidth(text2);
        int hh = fm.getHeight();
        Icon icon = null;
        Rectangle viewR = new Rectangle(10, 20, 100, 25);
        Rectangle iconR = new Rectangle();
        Rectangle textR = new Rectangle();
        harness.checkPoint("TL-text");
        displayText = SwingUtilities.layoutCompoundLabel(fm, text2, icon, 1, 2, 0, 2, viewR, iconR, textR, 3);
        harness.check(viewR, new Rectangle(10, 20, 100, 25));
        harness.check(iconR, new Rectangle(10 + ww, 20 + hh / 2, 0, 0));
        harness.check(textR, new Rectangle(10, 20, ww, hh));
        harness.checkPoint("TC-text");
        iconR = new Rectangle();
        textR = new Rectangle();
        displayText = SwingUtilities.layoutCompoundLabel(fm, text2, icon, 1, 0, 0, 2, viewR, iconR, textR, 3);
        harness.check(viewR, new Rectangle(10, 20, 100, 25));
        harness.check(iconR, new Rectangle(60 + (ww + 1) / 2, 20 + hh / 2, 0, 0));
        harness.check(textR, new Rectangle(60 - ww / 2, 20, ww, hh));
        harness.checkPoint("TR-text");
        iconR = new Rectangle();
        textR = new Rectangle();
        displayText = SwingUtilities.layoutCompoundLabel(fm, text2, icon, 1, 4, 0, 2, viewR, iconR, textR, 3);
        harness.check(viewR, new Rectangle(10, 20, 100, 25));
        harness.check(iconR, new Rectangle(110, 20 + hh / 2, 0, 0));
        harness.check(textR, new Rectangle(110 - ww, 20, ww, hh));
        harness.checkPoint("CL-text");
        iconR = new Rectangle();
        textR = new Rectangle();
        displayText = SwingUtilities.layoutCompoundLabel(fm, text2, icon, 0, 2, 0, 2, viewR, iconR, textR, 3);
        harness.check(viewR, new Rectangle(10, 20, 100, 25));
        harness.check(iconR, new Rectangle(10 + ww, 32, 0, 0));
        harness.check(textR, new Rectangle(10, 32 - hh / 2, ww, hh));
        harness.checkPoint("CC-text");
        iconR = new Rectangle();
        textR = new Rectangle();
        displayText = SwingUtilities.layoutCompoundLabel(fm, text2, icon, 0, 0, 0, 2, viewR, iconR, textR, 3);
        harness.check(viewR, new Rectangle(10, 20, 100, 25));
        harness.check(iconR, new Rectangle(60 + (ww + 1) / 2, 32, 0, 0));
        harness.check(textR, new Rectangle(60 - ww / 2, 32 - hh / 2, ww, hh));
        harness.checkPoint("CR-text");
        iconR = new Rectangle();
        textR = new Rectangle();
        displayText = SwingUtilities.layoutCompoundLabel(fm, text2, icon, 0, 4, 0, 2, viewR, iconR, textR, 3);
        harness.check(viewR, new Rectangle(10, 20, 100, 25));
        harness.check(iconR, new Rectangle(110, 32, 0, 0));
        harness.check(textR, new Rectangle(110 - ww, 32 - hh / 2, ww, hh));
        harness.checkPoint("BL-text");
        iconR = new Rectangle();
        textR = new Rectangle();
        displayText = SwingUtilities.layoutCompoundLabel(fm, text2, icon, 3, 2, 0, 2, viewR, iconR, textR, 3);
        harness.check(viewR, new Rectangle(10, 20, 100, 25));
        harness.check(iconR, new Rectangle(10 + ww, 37, 0, 0));
        harness.check(textR, new Rectangle(10, 45 - hh, ww, hh));
        harness.checkPoint("BC-text");
        iconR = new Rectangle();
        textR = new Rectangle();
        displayText = SwingUtilities.layoutCompoundLabel(fm, text2, icon, 3, 0, 0, 2, viewR, iconR, textR, 3);
        harness.check(viewR, new Rectangle(10, 20, 100, 25));
        harness.check(iconR, new Rectangle(60 + (ww + 1) / 2, 37, 0, 0));
        harness.check(textR, new Rectangle(60 - ww / 2, 45 - hh, ww, hh));
        harness.checkPoint("BR-text");
        iconR = new Rectangle();
        textR = new Rectangle();
        displayText = SwingUtilities.layoutCompoundLabel(fm, text2, icon, 3, 4, 0, 2, viewR, iconR, textR, 3);
        harness.check(viewR, new Rectangle(10, 20, 100, 25));
        harness.check(iconR, new Rectangle(110, 37, 0, 0));
        harness.check(textR, new Rectangle(110 - ww, 45 - hh, ww, hh));
    }

    public void test1IconOnly(TestHarness harness) {
        JLabel label = new JLabel("X");
        Font font = new Font("Dialog", 0, 12);
        FontMetrics fm = label.getFontMetrics(font);
        String text2 = null;
        String displayText = "";
        Icon icon = BasicIconFactory.getMenuArrowIcon();
        int ww = icon.getIconWidth();
        int hh = icon.getIconHeight();
        Rectangle viewR = new Rectangle(10, 20, 100, 25);
        Rectangle iconR = new Rectangle();
        Rectangle textR = new Rectangle();
        harness.checkPoint("TL-icon");
        displayText = SwingUtilities.layoutCompoundLabel(fm, text2, icon, 1, 2, 0, 2, viewR, iconR, textR, 3);
        harness.check(viewR, new Rectangle(10, 20, 100, 25));
        harness.check(textR, new Rectangle(10, 24, 0, 0));
        harness.check(iconR, new Rectangle(10, 20, ww, hh));
        harness.checkPoint("TC-icon");
        iconR = new Rectangle();
        textR = new Rectangle();
        displayText = SwingUtilities.layoutCompoundLabel(fm, text2, icon, 1, 0, 0, 2, viewR, iconR, textR, 3);
        harness.check(viewR, new Rectangle(10, 20, 100, 25));
        harness.check(textR, new Rectangle(60 - ww / 2, 24, 0, 0));
        harness.check(iconR, new Rectangle(60 - ww / 2, 20, ww, hh));
        harness.checkPoint("TR-icon");
        iconR = new Rectangle();
        textR = new Rectangle();
        displayText = SwingUtilities.layoutCompoundLabel(fm, text2, icon, 1, 4, 0, 2, viewR, iconR, textR, 3);
        harness.check(viewR, new Rectangle(10, 20, 100, 25));
        harness.check(textR, new Rectangle(110 - ww, 24, 0, 0));
        harness.check(iconR, new Rectangle(110 - ww, 20, ww, hh));
        harness.checkPoint("CL-icon");
        iconR = new Rectangle();
        textR = new Rectangle();
        displayText = SwingUtilities.layoutCompoundLabel(fm, text2, icon, 0, 2, 0, 2, viewR, iconR, textR, 3);
        harness.check(viewR, new Rectangle(10, 20, 100, 25));
        harness.check(textR, new Rectangle(10, 32, 0, 0));
        harness.check(iconR, new Rectangle(10, 32 - hh / 2, ww, hh));
        harness.checkPoint("CC-icon");
        iconR = new Rectangle();
        textR = new Rectangle();
        displayText = SwingUtilities.layoutCompoundLabel(fm, text2, icon, 0, 0, 0, 2, viewR, iconR, textR, 3);
        harness.check(viewR, new Rectangle(10, 20, 100, 25));
        harness.check(textR, new Rectangle(60 - ww / 2, 32, 0, 0));
        harness.check(iconR, new Rectangle(60 - ww / 2, 32 - hh / 2, ww, hh));
        harness.checkPoint("CR-icon");
        iconR = new Rectangle();
        textR = new Rectangle();
        displayText = SwingUtilities.layoutCompoundLabel(fm, text2, icon, 0, 4, 0, 2, viewR, iconR, textR, 3);
        harness.check(viewR, new Rectangle(10, 20, 100, 25));
        harness.check(textR, new Rectangle(110 - ww, 32, 0, 0));
        harness.check(iconR, new Rectangle(110 - ww, 32 - hh / 2, ww, hh));
        harness.checkPoint("BL-icon");
        iconR = new Rectangle();
        textR = new Rectangle();
        displayText = SwingUtilities.layoutCompoundLabel(fm, text2, icon, 3, 2, 0, 2, viewR, iconR, textR, 3);
        harness.check(viewR, new Rectangle(10, 20, 100, 25));
        harness.check(textR, new Rectangle(10, 41, 0, 0));
        harness.check(iconR, new Rectangle(10, 45 - hh, ww, hh));
        harness.checkPoint("BC-icon");
        iconR = new Rectangle();
        textR = new Rectangle();
        displayText = SwingUtilities.layoutCompoundLabel(fm, text2, icon, 3, 0, 0, 2, viewR, iconR, textR, 3);
        harness.check(viewR, new Rectangle(10, 20, 100, 25));
        harness.check(textR, new Rectangle(60 - ww / 2, 41, 0, 0));
        harness.check(iconR, new Rectangle(60 - ww / 2, 45 - hh, ww, hh));
        harness.checkPoint("BR-icon");
        iconR = new Rectangle();
        textR = new Rectangle();
        displayText = SwingUtilities.layoutCompoundLabel(fm, text2, icon, 3, 4, 0, 2, viewR, iconR, textR, 3);
        harness.check(viewR, new Rectangle(10, 20, 100, 25));
        harness.check(textR, new Rectangle(110 - ww, 41, 0, 0));
        harness.check(iconR, new Rectangle(110 - ww, 45 - hh, ww, hh));
    }

    public void test1TextAndIconCL(TestHarness harness) {
        JLabel label = new JLabel("X");
        Font font = new Font("Dialog", 0, 12);
        FontMetrics fm = label.getFontMetrics(font);
        String text2 = "X";
        String displayText = "";
        int ww = fm.stringWidth(text2);
        int hh = fm.getHeight();
        Icon icon = BasicIconFactory.getMenuArrowIcon();
        int iconW = icon.getIconWidth();
        int iconH = icon.getIconHeight();
        Rectangle viewR = new Rectangle(10, 20, 100, 25);
        Rectangle iconR = new Rectangle();
        Rectangle textR = new Rectangle();
        harness.checkPoint("TL-CL");
        displayText = SwingUtilities.layoutCompoundLabel(fm, text2, icon, 1, 2, 0, 2, viewR, iconR, textR, 3);
        harness.check(viewR, new Rectangle(10, 20, 100, 25));
        harness.check(iconR, new Rectangle(10 + ww + 3, 20 + (hh - icon.getIconHeight()) / 2, iconW, iconH));
        harness.check(textR, new Rectangle(10, 20, ww, hh));
        harness.checkPoint("TC-CL");
        iconR = new Rectangle();
        textR = new Rectangle();
        displayText = SwingUtilities.layoutCompoundLabel(fm, text2, icon, 1, 0, 0, 2, viewR, iconR, textR, 3);
        harness.check(viewR, new Rectangle(10, 20, 100, 25));
        harness.check(iconR, new Rectangle(60 + ww / 2, 20 + (hh - icon.getIconHeight()) / 2, iconW, iconH));
        harness.check(textR, new Rectangle(60 - (ww + 1) / 2 - 3, 20, ww, hh));
        harness.checkPoint("TR-CL");
        iconR = new Rectangle();
        textR = new Rectangle();
        displayText = SwingUtilities.layoutCompoundLabel(fm, text2, icon, 1, 4, 0, 2, viewR, iconR, textR, 3);
        harness.check(viewR, new Rectangle(10, 20, 100, 25));
        harness.check(iconR, new Rectangle(110 - iconW, 20 + (hh - icon.getIconHeight()) / 2, iconW, iconH));
        harness.check(textR, new Rectangle(110 - ww - iconW - 3, 20, ww, hh));
        harness.checkPoint("CL-CL");
        iconR = new Rectangle();
        textR = new Rectangle();
        displayText = SwingUtilities.layoutCompoundLabel(fm, text2, icon, 0, 2, 0, 2, viewR, iconR, textR, 3);
        harness.check(viewR, new Rectangle(10, 20, 100, 25));
        harness.check(iconR, new Rectangle(10 + ww + 3, 32 - iconH / 2, iconW, iconH));
        harness.check(textR, new Rectangle(10, 32 - hh / 2, ww, hh));
        harness.checkPoint("CC-CL");
        iconR = new Rectangle();
        textR = new Rectangle();
        displayText = SwingUtilities.layoutCompoundLabel(fm, text2, icon, 0, 0, 0, 2, viewR, iconR, textR, 3);
        harness.check(viewR, new Rectangle(10, 20, 100, 25));
        harness.check(iconR, new Rectangle(60 + ww / 2, 32 - iconH / 2, iconW, iconH));
        harness.check(textR, new Rectangle(60 - (ww + 1) / 2 - 3, 32 - hh / 2, ww, hh));
        harness.checkPoint("CR-CL");
        iconR = new Rectangle();
        textR = new Rectangle();
        displayText = SwingUtilities.layoutCompoundLabel(fm, text2, icon, 0, 4, 0, 2, viewR, iconR, textR, 3);
        harness.check(viewR, new Rectangle(10, 20, 100, 25));
        harness.check(iconR, new Rectangle(110 - iconW, 32 - iconH / 2, iconW, iconH));
        harness.check(textR, new Rectangle(110 - ww - iconW - 3, 32 - hh / 2, ww, hh));
        harness.checkPoint("BL-CL");
        iconR = new Rectangle();
        textR = new Rectangle();
        displayText = SwingUtilities.layoutCompoundLabel(fm, text2, icon, 3, 2, 0, 2, viewR, iconR, textR, 3);
        harness.check(viewR, new Rectangle(10, 20, 100, 25));
        harness.check(iconR, new Rectangle(10 + ww + 3, 45 - hh + (hh - iconH) / 2, iconW, iconH));
        harness.check(textR, new Rectangle(10, 45 - hh, ww, hh));
        harness.checkPoint("BC-CL");
        iconR = new Rectangle();
        textR = new Rectangle();
        displayText = SwingUtilities.layoutCompoundLabel(fm, text2, icon, 3, 0, 0, 2, viewR, iconR, textR, 3);
        harness.check(viewR, new Rectangle(10, 20, 100, 25));
        harness.check(iconR, new Rectangle(60 + ww / 2, 45 - hh + (hh - iconH) / 2, iconW, iconH));
        harness.check(textR, new Rectangle(60 - (ww + 1) / 2 - 3, 45 - hh, ww, hh));
        harness.checkPoint("BR-CL");
        iconR = new Rectangle();
        textR = new Rectangle();
        displayText = SwingUtilities.layoutCompoundLabel(fm, text2, icon, 3, 4, 0, 2, viewR, iconR, textR, 3);
        harness.check(viewR, new Rectangle(10, 20, 100, 25));
        harness.check(iconR, new Rectangle(110 - iconW, 45 - hh + (hh - iconH) / 2, iconW, iconH));
        harness.check(textR, new Rectangle(110 - ww - iconW - 3, 45 - hh, ww, hh));
    }

    public void test1TextAndIconCR(TestHarness harness) {
        JLabel label = new JLabel("X");
        Font font = new Font("Dialog", 0, 12);
        FontMetrics fm = label.getFontMetrics(font);
        String text2 = "X";
        String displayText = "";
        int ww = fm.stringWidth(text2);
        int hh = fm.getHeight();
        Icon icon = BasicIconFactory.getMenuArrowIcon();
        int iconW = icon.getIconWidth();
        int iconH = icon.getIconHeight();
        Rectangle viewR = new Rectangle(10, 20, 100, 25);
        Rectangle iconR = new Rectangle();
        Rectangle textR = new Rectangle();
        harness.checkPoint("TL-CR");
        displayText = SwingUtilities.layoutCompoundLabel(fm, text2, icon, 1, 2, 0, 4, viewR, iconR, textR, 3);
        harness.check(viewR, new Rectangle(10, 20, 100, 25));
        harness.check(iconR, new Rectangle(10, 20 + (hh - icon.getIconHeight()) / 2, iconW, iconH));
        harness.check(textR, new Rectangle(10 + iconW + 3, 20, ww, hh));
        harness.checkPoint("TC-CR");
        iconR = new Rectangle();
        textR = new Rectangle();
        displayText = SwingUtilities.layoutCompoundLabel(fm, text2, icon, 1, 0, 0, 4, viewR, iconR, textR, 3);
        harness.check(viewR, new Rectangle(10, 20, 100, 25));
        harness.check(iconR, new Rectangle(60 - (ww + 1) / 2 - 3, 20 + (hh - icon.getIconHeight()) / 2, iconW, iconH));
        harness.check(textR, new Rectangle(60 + (iconW + 3 + ww + 1) / 2 - ww, 20, ww, hh));
        harness.checkPoint("TR-CR");
        iconR = new Rectangle();
        textR = new Rectangle();
        displayText = SwingUtilities.layoutCompoundLabel(fm, text2, icon, 1, 4, 0, 4, viewR, iconR, textR, 3);
        harness.check(viewR, new Rectangle(10, 20, 100, 25));
        harness.check(iconR, new Rectangle(110 - ww - iconW - 3, 20 + (hh - icon.getIconHeight()) / 2, iconW, iconH));
        harness.check(textR, new Rectangle(110 - ww, 20, ww, hh));
        harness.checkPoint("CL-CR");
        iconR = new Rectangle();
        textR = new Rectangle();
        displayText = SwingUtilities.layoutCompoundLabel(fm, text2, icon, 0, 2, 0, 4, viewR, iconR, textR, 3);
        harness.check(viewR, new Rectangle(10, 20, 100, 25));
        harness.check(iconR, new Rectangle(10, 32 - iconH / 2, iconW, iconH));
        harness.check(textR, new Rectangle(10 + iconW + 3, 32 - hh / 2, ww, hh));
        harness.checkPoint("CC-CR");
        iconR = new Rectangle();
        textR = new Rectangle();
        displayText = SwingUtilities.layoutCompoundLabel(fm, text2, icon, 0, 0, 0, 4, viewR, iconR, textR, 3);
        harness.check(viewR, new Rectangle(10, 20, 100, 25));
        harness.check(iconR, new Rectangle(60 - (ww + 1) / 2 - 3, 32 - iconH / 2, iconW, iconH));
        harness.check(textR, new Rectangle(60 + (iconW + 3 + ww + 1) / 2 - ww, 32 - hh / 2, ww, hh));
        harness.checkPoint("CR-CR");
        iconR = new Rectangle();
        textR = new Rectangle();
        displayText = SwingUtilities.layoutCompoundLabel(fm, text2, icon, 0, 4, 0, 4, viewR, iconR, textR, 3);
        harness.check(viewR, new Rectangle(10, 20, 100, 25));
        harness.check(iconR, new Rectangle(110 - ww - iconW - 3, 32 - iconH / 2, iconW, iconH));
        harness.check(textR, new Rectangle(110 - ww, 32 - hh / 2, ww, hh));
        harness.checkPoint("BL-CR");
        iconR = new Rectangle();
        textR = new Rectangle();
        displayText = SwingUtilities.layoutCompoundLabel(fm, text2, icon, 3, 2, 0, 4, viewR, iconR, textR, 3);
        harness.check(viewR, new Rectangle(10, 20, 100, 25));
        harness.check(iconR, new Rectangle(10, 45 - hh + (hh - iconH) / 2, iconW, iconH));
        harness.check(textR, new Rectangle(10 + iconW + 3, 45 - hh, ww, hh));
        harness.checkPoint("BC-CR");
        iconR = new Rectangle();
        textR = new Rectangle();
        displayText = SwingUtilities.layoutCompoundLabel(fm, text2, icon, 3, 0, 0, 4, viewR, iconR, textR, 3);
        harness.check(viewR, new Rectangle(10, 20, 100, 25));
        harness.check(iconR, new Rectangle(60 - (ww + 1) / 2 - 3, 45 - hh + (hh - iconH) / 2, iconW, iconH));
        harness.check(textR, new Rectangle(60 + (iconW + 3 + ww + 1) / 2 - ww, 45 - hh, ww, hh));
        harness.checkPoint("BR-CR");
        iconR = new Rectangle();
        textR = new Rectangle();
        displayText = SwingUtilities.layoutCompoundLabel(fm, text2, icon, 3, 4, 0, 4, viewR, iconR, textR, 3);
        harness.check(viewR, new Rectangle(10, 20, 100, 25));
        harness.check(iconR, new Rectangle(110 - ww - iconW - 3, 45 - hh + (hh - iconH) / 2, iconW, iconH));
        harness.check(textR, new Rectangle(110 - ww, 45 - hh, ww, hh));
    }
}

