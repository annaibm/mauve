/*
 * Decompiled with CFR 0.152.
 */
package gnu.testlet.javax.imageio.spi.ServiceRegistry;

import gnu.testlet.TestHarness;
import gnu.testlet.Testlet;
import gnu.testlet.javax.imageio.spi.ServiceRegistry.MultiplicationService;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.URL;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.logging.Handler;
import java.util.logging.Level;
import java.util.logging.LogRecord;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.imageio.spi.ServiceRegistry;

public class lookupProviders
implements Testlet {
    @Override
    public void test(TestHarness h) {
        Exception caught;
        this.setupLogging(h);
        String packageName = "gnu.testlet.javax.imageio.spi.ServiceRegistry";
        URL[] providers = new URL[2];
        try {
            providers[0] = this.createProviderList(new String[]{packageName + ".MultiplierOne", packageName + ".MultiplierTwo"});
            providers[1] = this.createProviderList(new String[]{packageName + ".MultiplierThree"});
        }
        catch (IOException ioex) {
            h.check(false);
            h.debug(ioex);
            return;
        }
        CustomClassLoader myClassLoader = new CustomClassLoader(providers);
        try {
            ServiceRegistry.lookupProviders(null, myClassLoader);
            caught = null;
        }
        catch (Exception ex) {
            caught = ex;
        }
        h.check(caught instanceof IllegalArgumentException);
        Iterator<MultiplicationService> it = ServiceRegistry.lookupProviders(MultiplicationService.class, myClassLoader);
        h.check(it.hasNext());
        MultiplicationService s = it.next();
        h.check(s.multiply(4, 5), 20);
        h.check(s.getName(), (Object)"MultiplierOne");
        h.check(it.hasNext());
        s = it.next();
        h.check(s.getName(), (Object)"MultiplierTwo");
        h.check(it.hasNext());
        s = it.next();
        h.check(s.getName(), (Object)"MultiplierThree");
        h.check(!it.hasNext());
        caught = null;
        try {
            it.next();
        }
        catch (Exception ex) {
            caught = ex;
        }
        h.check(caught instanceof NoSuchElementException);
    }

    private void setupLogging(TestHarness harness) {
        Logger logger = Logger.getLogger("gnu.classpath");
        logger.setLevel(Level.ALL);
        logger.addHandler(new DebugHandler(harness));
    }

    private URL createProviderList(String[] listedProviders) throws IOException {
        File f = File.createTempFile("MauveTest-", ".txt");
        f.deleteOnExit();
        PrintWriter p = new PrintWriter(new FileOutputStream(f));
        p.println("# This file has been generated by the Mauve testsuite");
        p.println("# while testing the mechanism for loading plug-in services.");
        p.println("# (Code in " + this.getClass().getName() + ").");
        p.println();
        p.println("# It should be automatically deleted from the temporary");
        p.println("# directory. If you happen to see this file, you probably");
        p.println("# have run the Mauve testsuite with a Java Virtual Machine");
        p.println("# that does not provide a correct implementaion of the method");
        p.println("# java.io.File.deleteOnExit().");
        p.println();
        p.println("# Implementations for the plug-in service");
        p.print("# ");
        p.println(MultiplicationService.class.getName());
        p.println();
        for (int i = 0; i < listedProviders.length; ++i) {
            p.println(listedProviders[i]);
        }
        p.close();
        return f.toURL();
    }

    private class CustomClassLoader
    extends ClassLoader {
        private final URL[] providerLists;

        public CustomClassLoader(URL[] providerLists) {
            super(CustomClassLoader.class.getClassLoader());
            this.providerLists = providerLists;
        }

        protected Enumeration findResources(String name2) throws IOException {
            if (name2.equals("META-INF/services/gnu.testlet.javax.imageio.spi.ServiceRegistry.MultiplicationService")) {
                return new ProviderEnumeration();
            }
            return super.findResources(name2);
        }

        private class ProviderEnumeration
        implements Enumeration {
            private int next = 0;

            private ProviderEnumeration() {
            }

            public Object nextElement() {
                return CustomClassLoader.this.providerLists[this.next++];
            }

            @Override
            public boolean hasMoreElements() {
                return this.next < CustomClassLoader.this.providerLists.length;
            }
        }
    }

    private static class DebugHandler
    extends Handler {
        private final TestHarness harness;

        public DebugHandler(TestHarness harness) {
            this.harness = harness;
            this.setLevel(Level.ALL);
            this.setFormatter(new SimpleFormatter());
        }

        @Override
        public void publish(LogRecord rec) {
            this.harness.debug(this.getFormatter().format(rec).trim());
            if (rec.getThrown() != null) {
                this.harness.debug(rec.getThrown());
            }
        }

        @Override
        public void flush() {
        }

        @Override
        public void close() {
        }
    }
}

